
ShopRobotics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006674  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a84  08006a84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a8c  08006a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000070  08006b04  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  08006b04  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ba2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e87  00000000  00000000  00034c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  000389c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235e9  00000000  00000000  000397b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a91  00000000  00000000  0005cd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce570  00000000  00000000  0006e82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cd9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  0013cdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067ec 	.word	0x080067ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080067ec 	.word	0x080067ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028e:	f000 b9b9 	b.w	8000604 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <comms_preWrite>:

void comms_finishRead() {
  return hw_uart_flip_buffer();
} 

uint8_t* comms_preWrite(uint8_t sz) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  if (hw_uart_busy()) {
 8000612:	f000 f9cb 	bl	80009ac <hw_uart_busy>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <comms_preWrite+0x18>
    return 0;
 800061c:	2300      	movs	r3, #0
 800061e:	e00d      	b.n	800063c <comms_preWrite+0x34>
  }
   uint8_t* ptr = hw_uart_get_write_buffer();
 8000620:	f000 f996 	bl	8000950 <hw_uart_get_write_buffer>
 8000624:	60f8      	str	r0, [r7, #12]
  (*ptr++) = PACKET_START_BYTE;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	60fa      	str	r2, [r7, #12]
 800062c:	22aa      	movs	r2, #170	; 0xaa
 800062e:	701a      	strb	r2, [r3, #0]
  (*ptr++) = sz;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60fa      	str	r2, [r7, #12]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	701a      	strb	r2, [r3, #0]
  return ptr;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <comms_flush>:

void comms_flush(uint8_t sz) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if (!hw_uart_send(sz)) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f987 	bl	8000964 <hw_uart_send>
 8000656:	4603      	mov	r3, r0
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <comms_flush+0x28>
    LOG_ERROR("SNDFAIL (sz %d)", sz);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4619      	mov	r1, r3
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <comms_flush+0x30>)
 8000668:	f004 ff1c 	bl	80054a4 <iprintf>
  }
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	08006804 	.word	0x08006804

08000678 <hal_micros>:

int8_t dirs[NUM_J];
int64_t usteps[NUM_J];
int16_t rates[NUM_J];

uint32_t hal_micros() {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  return hw_micros();
 800067c:	f000 fa32 	bl	8000ae4 <hw_micros>
 8000680:	4603      	mov	r3, r0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <syncSteps>:
    rates[i] = 0;
  }
}

uint32_t last_sync_usec = 0;
void syncSteps() {
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
  uint32_t now = hw_micros();
 800068e:	f000 fa29 	bl	8000ae4 <hw_micros>
 8000692:	6038      	str	r0, [r7, #0]
  if (now < last_sync_usec) {
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <syncSteps+0x88>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	429a      	cmp	r2, r3
 800069c:	d203      	bcs.n	80006a6 <syncSteps+0x1e>
    // Rollover
    // TODO handle this better
    last_sync_usec = now;
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <syncSteps+0x88>)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	6013      	str	r3, [r2, #0]
    return;
 80006a4:	e030      	b.n	8000708 <syncSteps+0x80>
  }

  for (int i = 0; i < NUM_J; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	e027      	b.n	80006fc <syncSteps+0x74>
    usteps[i] += (dirs[i] * rates[i] * (now - last_sync_usec));
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <syncSteps+0x8c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	4413      	add	r3, r2
 80006b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <syncSteps+0x90>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	f993 3000 	ldrsb.w	r3, [r3]
 80006c2:	461e      	mov	r6, r3
 80006c4:	4a15      	ldr	r2, [pc, #84]	; (800071c <syncSteps+0x94>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006cc:	fb03 f306 	mul.w	r3, r3, r6
 80006d0:	461e      	mov	r6, r3
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <syncSteps+0x88>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	fb03 f306 	mul.w	r3, r3, r6
 80006de:	461a      	mov	r2, r3
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	1884      	adds	r4, r0, r2
 80006e6:	eb41 0503 	adc.w	r5, r1, r3
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <syncSteps+0x8c>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	4413      	add	r3, r2
 80006f2:	e9c3 4500 	strd	r4, r5, [r3]
  for (int i = 0; i < NUM_J; i++) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b05      	cmp	r3, #5
 8000700:	ddd4      	ble.n	80006ac <syncSteps+0x24>
  }
  last_sync_usec = now;
 8000702:	4a03      	ldr	r2, [pc, #12]	; (8000710 <syncSteps+0x88>)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	bf00      	nop
 8000710:	2000008c 	.word	0x2000008c
 8000714:	200000b0 	.word	0x200000b0
 8000718:	200000e0 	.word	0x200000e0
 800071c:	200000e8 	.word	0x200000e8

08000720 <hal_setStepRate>:

void hal_setStepRate(uint8_t j, int16_t rate) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
  // TODO set direction GPIO
  syncSteps();
 8000730:	f7ff ffaa 	bl	8000688 <syncSteps>
  hw_set_dir_and_pwm(j, rate);
 8000734:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f859 	bl	80007f4 <hw_set_dir_and_pwm>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <hal_readEnc>:

uint8_t hal_readLimit(uint8_t j) {
  return hw_limit_read(j);
}
int16_t hal_readEnc(uint8_t i) {
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
  return 0; // TODO
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <hal_readSteps>:
int32_t hal_readSteps(uint8_t j) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  syncSteps(); 
 800076e:	f7ff ff8b 	bl	8000688 <syncSteps>
  return usteps[j]/1000000;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <hal_readSteps+0x34>)
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <hal_readSteps+0x38>)
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	f7ff fd74 	bl	8000270 <__aeabi_ldivmod>
 8000788:	4602      	mov	r2, r0
 800078a:	460b      	mov	r3, r1
 800078c:	4613      	mov	r3, r2
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000b0 	.word	0x200000b0
 800079c:	000f4240 	.word	0x000f4240

080007a0 <_write>:
static void MX_TIM2_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

// Overrides the weak _write definition in syscalls.c to allow for printf() to uart4.
int _write(int file, char *data, int len) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d00a      	beq.n	80007c8 <_write+0x28>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d007      	beq.n	80007c8 <_write+0x28>
      errno = EBADF;
 80007b8:	f004 fe34 	bl	8005424 <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	2209      	movs	r2, #9
 80007c0:	601a      	str	r2, [r3, #0]
      return -1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c6:	e00f      	b.n	80007e8 <_write+0x48>
   }

   // arbitrary timeout 1000
   // This could be done async, but would be more difficult. Hold off until necessary.
   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart4, (uint8_t*)data, len, 1000);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <_write+0x50>)
 80007d4:	f003 fe71 	bl	80044ba <HAL_UART_Transmit>
 80007d8:	4603      	mov	r3, r0
 80007da:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80007dc:	7dfb      	ldrb	r3, [r7, #23]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <_write+0x46>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	e000      	b.n	80007e8 <_write+0x48>
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200003a4 	.word	0x200003a4

080007f4 <hw_set_dir_and_pwm>:
// WARNING: PD12 conflicts with TIM4 CH1
//#define SUC_PIN GPIO_PIN_12
// On data transfer, light LD6 (PD15) - blue
#define XFER_PIN GPIO_PIN_15

void hw_set_dir_and_pwm(uint8_t j, int16_t hz) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b096      	sub	sp, #88	; 0x58
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
  TIM_HandleTypeDef tmr;
  switch(j) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b05      	cmp	r3, #5
 8000808:	f200 808a 	bhi.w	8000920 <hw_set_dir_and_pwm+0x12c>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <hw_set_dir_and_pwm+0x20>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	0800082d 	.word	0x0800082d
 8000818:	0800083f 	.word	0x0800083f
 800081c:	08000851 	.word	0x08000851
 8000820:	08000863 	.word	0x08000863
 8000824:	08000875 	.word	0x08000875
 8000828:	08000887 	.word	0x08000887
    case 0:
      tmr = htim3;
 800082c:	4a3e      	ldr	r2, [pc, #248]	; (8000928 <hw_set_dir_and_pwm+0x134>)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4611      	mov	r1, r2
 8000834:	2248      	movs	r2, #72	; 0x48
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fe1e 	bl	8005478 <memcpy>
      break;
 800083c:	e02c      	b.n	8000898 <hw_set_dir_and_pwm+0xa4>
    case 1:
      tmr = htim4;
 800083e:	4a3b      	ldr	r2, [pc, #236]	; (800092c <hw_set_dir_and_pwm+0x138>)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4611      	mov	r1, r2
 8000846:	2248      	movs	r2, #72	; 0x48
 8000848:	4618      	mov	r0, r3
 800084a:	f004 fe15 	bl	8005478 <memcpy>
      break;
 800084e:	e023      	b.n	8000898 <hw_set_dir_and_pwm+0xa4>
    case 2:
      tmr = htim10;
 8000850:	4a37      	ldr	r2, [pc, #220]	; (8000930 <hw_set_dir_and_pwm+0x13c>)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4611      	mov	r1, r2
 8000858:	2248      	movs	r2, #72	; 0x48
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fe0c 	bl	8005478 <memcpy>
      break;
 8000860:	e01a      	b.n	8000898 <hw_set_dir_and_pwm+0xa4>
    case 3:
      tmr = htim11;
 8000862:	4a34      	ldr	r2, [pc, #208]	; (8000934 <hw_set_dir_and_pwm+0x140>)
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4611      	mov	r1, r2
 800086a:	2248      	movs	r2, #72	; 0x48
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fe03 	bl	8005478 <memcpy>
      break;
 8000872:	e011      	b.n	8000898 <hw_set_dir_and_pwm+0xa4>
    case 4:
      tmr = htim13;
 8000874:	4a30      	ldr	r2, [pc, #192]	; (8000938 <hw_set_dir_and_pwm+0x144>)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4611      	mov	r1, r2
 800087c:	2248      	movs	r2, #72	; 0x48
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fdfa 	bl	8005478 <memcpy>
      break;
 8000884:	e008      	b.n	8000898 <hw_set_dir_and_pwm+0xa4>
    case 5:
      tmr = htim14;
 8000886:	4a2d      	ldr	r2, [pc, #180]	; (800093c <hw_set_dir_and_pwm+0x148>)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4611      	mov	r1, r2
 800088e:	2248      	movs	r2, #72	; 0x48
 8000890:	4618      	mov	r0, r3
 8000892:	f004 fdf1 	bl	8005478 <memcpy>
      break;
 8000896:	bf00      	nop
    default:
      return;
  } 
  HAL_TIM_PWM_Stop(&tmr, TIM_CHANNEL_1);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 ffdc 	bl	800385c <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(DIR_PORT, DIR_PINS[j], (hz > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	4a26      	ldr	r2, [pc, #152]	; (8000940 <hw_set_dir_and_pwm+0x14c>)
 80008a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bfcc      	ite	gt
 80008b4:	2301      	movgt	r3, #1
 80008b6:	2300      	movle	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	4821      	ldr	r0, [pc, #132]	; (8000944 <hw_set_dir_and_pwm+0x150>)
 80008be:	f002 f91f 	bl	8002b00 <HAL_GPIO_WritePin>
  if (hz < 0) {
 80008c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da03      	bge.n	80008d2 <hw_set_dir_and_pwm+0xde>
    hz = -hz;
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	425b      	negs	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	80bb      	strh	r3, [r7, #4]
  }
  if (hz != 0) {
 80008d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d023      	beq.n	8000922 <hw_set_dir_and_pwm+0x12e>
    //tmr.Instance->PSC = TIM_PSC; // handled on init
    // (PSC+1)*(ARR+1) = TIMclk/Updatefrequency
    uint16_t arr = (TIM_CLK/hz)/(TIM_PSC+1) - 1; 
 80008da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008de:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <hw_set_dir_and_pwm+0x154>)
 80008e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008e4:	4a19      	ldr	r2, [pc, #100]	; (800094c <hw_set_dir_and_pwm+0x158>)
 80008e6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ea:	1152      	asrs	r2, r2, #5
 80008ec:	17db      	asrs	r3, r3, #31
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    __HAL_TIM_SET_AUTORELOAD(&tmr, arr);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000904:	61bb      	str	r3, [r7, #24]
    __HAL_TIM_SET_COMPARE(&tmr, TIM_CHANNEL_1, arr/2); // 50% duty cycle
 8000906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800090a:	085b      	lsrs	r3, r3, #1
 800090c:	b29a      	uxth	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&tmr, TIM_CHANNEL_1);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fed7 	bl	80036cc <HAL_TIM_PWM_Start>
 800091e:	e000      	b.n	8000922 <hw_set_dir_and_pwm+0x12e>
      return;
 8000920:	bf00      	nop
  }
}
 8000922:	3758      	adds	r7, #88	; 0x58
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200002cc 	.word	0x200002cc
 800092c:	20000178 	.word	0x20000178
 8000930:	20000204 	.word	0x20000204
 8000934:	2000035c 	.word	0x2000035c
 8000938:	20000314 	.word	0x20000314
 800093c:	20000430 	.word	0x20000430
 8000940:	0800693c 	.word	0x0800693c
 8000944:	40020c00 	.word	0x40020c00
 8000948:	0501bd00 	.word	0x0501bd00
 800094c:	7e07e07f 	.word	0x7e07e07f

08000950 <hw_uart_get_write_buffer>:

#define BUFLEN 128
uint8_t uart3_out[BUFLEN];
bool uart3_sending = false;
uint8_t* hw_uart_get_write_buffer() {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uart3_out;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <hw_uart_get_write_buffer+0x10>)
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2000024c 	.word	0x2000024c

08000964 <hw_uart_send>:
bool hw_uart_send(uint8_t len) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if (BUFLEN < len || uart3_sending) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b80      	cmp	r3, #128	; 0x80
 8000972:	d803      	bhi.n	800097c <hw_uart_send+0x18>
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <hw_uart_send+0x3c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <hw_uart_send+0x1c>
    return false;
 800097c:	2300      	movs	r3, #0
 800097e:	e00a      	b.n	8000996 <hw_uart_send+0x32>
  }
  uart3_sending = true;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <hw_uart_send+0x3c>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart3, uart3_out, len);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	b29b      	uxth	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4905      	ldr	r1, [pc, #20]	; (80009a4 <hw_uart_send+0x40>)
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <hw_uart_send+0x44>)
 8000990:	f003 fe25 	bl	80045de <HAL_UART_Transmit_IT>
  // HAL_UART_Transmit(&huart3, uart3_out, len, 200);
  //uart3_sending = false;
  return true;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000090 	.word	0x20000090
 80009a4:	2000024c 	.word	0x2000024c
 80009a8:	200001c0 	.word	0x200001c0

080009ac <hw_uart_busy>:

bool hw_uart_busy() {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uart3_sending;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <hw_uart_busy+0x14>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000090 	.word	0x20000090

080009c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if (huart == &huart3) { 
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_UART_TxCpltCallback+0x24>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d102      	bne.n	80009da <HAL_UART_TxCpltCallback+0x16>
    uart3_sending = false;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_UART_TxCpltCallback+0x28>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	200001c0 	.word	0x200001c0
 80009ec:	20000090 	.word	0x20000090

080009f0 <uart3_listen>:
uint8_t uart3_recv_buf[2*INTENT_PACKET_SZ+PACKET_HEADER_SZ];
uint8_t uart3_fragment_buf[UART3_FRAGMENT_LEN];
uint8_t hw_idx = 0;
uint8_t hw_readlen = 0;

void uart3_listen() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, uart3_fragment_buf, UART3_FRAGMENT_LEN);
 80009f4:	2202      	movs	r2, #2
 80009f6:	4903      	ldr	r1, [pc, #12]	; (8000a04 <uart3_listen+0x14>)
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <uart3_listen+0x18>)
 80009fa:	f003 fe35 	bl	8004668 <HAL_UART_Receive_IT>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000174 	.word	0x20000174
 8000a08:	200001c0 	.word	0x200001c0

08000a0c <HAL_UART_RxCpltCallback>:
static int ncallbacks = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  ncallbacks++;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_UART_RxCpltCallback+0xc0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <HAL_UART_RxCpltCallback+0xc0>)
 8000a1c:	6013      	str	r3, [r2, #0]
  HAL_GPIO_TogglePin(LED_PORT, XFER_PIN);
 8000a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a22:	482b      	ldr	r0, [pc, #172]	; (8000ad0 <HAL_UART_RxCpltCallback+0xc4>)
 8000a24:	f002 f885 	bl	8002b32 <HAL_GPIO_TogglePin>
  uint8_t c;
  for (int f = 0; f < UART3_FRAGMENT_LEN; f++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e044      	b.n	8000ab8 <HAL_UART_RxCpltCallback+0xac>
    c = uart3_fragment_buf[f];
 8000a2e:	4a29      	ldr	r2, [pc, #164]	; (8000ad4 <HAL_UART_RxCpltCallback+0xc8>)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	72fb      	strb	r3, [r7, #11]
    if (c == PACKET_START_BYTE) {
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	2baa      	cmp	r3, #170	; 0xaa
 8000a3c:	d106      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0x40>
      // Magic byte, next byte is length
      hw_idx=0;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
      hw_readlen=0;
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_UART_RxCpltCallback+0xd0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
      continue;
 8000a4a:	e032      	b.n	8000ab2 <HAL_UART_RxCpltCallback+0xa6>
    }
    if (hw_idx == -1) {
      // Skip other bytes until we've processed a start byte
      continue;
    }
    if (hw_readlen == 0) {
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <HAL_UART_RxCpltCallback+0xd0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10a      	bne.n	8000a6a <HAL_UART_RxCpltCallback+0x5e>
      // NOTE: Max length is 255 characters
      hw_readlen = c;
 8000a54:	4a21      	ldr	r2, [pc, #132]	; (8000adc <HAL_UART_RxCpltCallback+0xd0>)
 8000a56:	7afb      	ldrb	r3, [r7, #11]
 8000a58:	7013      	strb	r3, [r2, #0]
      if (hw_readlen > INTENT_PACKET_SZ+PACKET_HEADER_SZ) {
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_UART_RxCpltCallback+0xd0>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b0b      	cmp	r3, #11
 8000a60:	d926      	bls.n	8000ab0 <HAL_UART_RxCpltCallback+0xa4>
    	hw_idx=-1;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a64:	22ff      	movs	r2, #255	; 0xff
 8000a66:	701a      	strb	r2, [r3, #0]
      }
      continue;
 8000a68:	e022      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0xa4>
    }
    uart3_recv_buf[hw_idx++] = c;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	b2d1      	uxtb	r1, r2
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a74:	7011      	strb	r1, [r2, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_UART_RxCpltCallback+0xd4>)
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	5453      	strb	r3, [r2, r1]
    if (hw_idx == hw_readlen) {
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_UART_RxCpltCallback+0xd0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d109      	bne.n	8000a9e <HAL_UART_RxCpltCallback+0x92>
      on_message(uart3_recv_buf, hw_idx);
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <HAL_UART_RxCpltCallback+0xd4>)
 8000a92:	f001 f9b1 	bl	8001df8 <on_message>
      hw_idx = -1;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e009      	b.n	8000ab2 <HAL_UART_RxCpltCallback+0xa6>
    } else if (hw_idx >= BUFLEN) {
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	da04      	bge.n	8000ab2 <HAL_UART_RxCpltCallback+0xa6>
      hw_idx = -1;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8000aaa:	22ff      	movs	r2, #255	; 0xff
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e000      	b.n	8000ab2 <HAL_UART_RxCpltCallback+0xa6>
      continue;
 8000ab0:	bf00      	nop
  for (int f = 0; f < UART3_FRAGMENT_LEN; f++) {
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d9b7      	bls.n	8000a2e <HAL_UART_RxCpltCallback+0x22>
      // TODO overrun warning indicator
    }
  }
  uart3_listen();
 8000abe:	f7ff ff97 	bl	80009f0 <uart3_listen>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000094 	.word	0x20000094
 8000ad0:	40020c00 	.word	0x40020c00
 8000ad4:	20000174 	.word	0x20000174
 8000ad8:	20000091 	.word	0x20000091
 8000adc:	20000092 	.word	0x20000092
 8000ae0:	20000478 	.word	0x20000478

08000ae4 <hw_micros>:
bool hw_limit_read(uint8_t j) {
  return HAL_GPIO_ReadPin(LIMIT_PORT, LIMIT_PINS[j]) != GPIO_PIN_RESET;
}

// Note that the micros value is NOT uint64_t - overflows every ~71 minutes
uint32_t hw_micros() {
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 8000ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f001 fc4e 	bl	800239c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f820 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 fb72 	bl	80011ec <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b08:	f000 f8f8 	bl	8000cfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b0c:	f000 f96c 	bl	8000de8 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000b10:	f000 f9e0 	bl	8000ed4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000b14:	f000 fa2c 	bl	8000f70 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000b18:	f000 fa78 	bl	800100c <MX_TIM13_Init>
  MX_TIM14_Init();
 8000b1c:	f000 fac4 	bl	80010a8 <MX_TIM14_Init>
  MX_UART4_Init();
 8000b20:	f000 fb10 	bl	8001144 <MX_UART4_Init>
  MX_TIM2_Init();
 8000b24:	f000 f878 	bl	8000c18 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000b28:	f000 fb36 	bl	8001198 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start our microsecond counter
  HAL_TIM_Base_Start(&htim2);
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <main+0x48>)
 8000b2e:	f002 fcb3 	bl	8003498 <HAL_TIM_Base_Start>

  // Begin interrupt-based uart read
  uart3_listen();
 8000b32:	f7ff ff5d 	bl	80009f0 <uart3_listen>

  // Continue with regular initialization
  setup();
 8000b36:	f001 f945 	bl	8001dc4 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	loop();
 8000b3a:	f001 f98f 	bl	8001e5c <loop>
 8000b3e:	e7fc      	b.n	8000b3a <main+0x42>
 8000b40:	200003e8 	.word	0x200003e8

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 fc9e 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a27      	ldr	r2, [pc, #156]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <SystemClock_Config+0xcc>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <SystemClock_Config+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <SystemClock_Config+0xd0>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <SystemClock_Config+0xd0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb8:	23a8      	movs	r3, #168	; 0xa8
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 ffcd 	bl	8002b68 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd4:	f000 fbc2 	bl	800135c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fa2e 	bl	8003058 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c02:	f000 fbab 	bl	800135c <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	; 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000

08000c18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c52:	2254      	movs	r2, #84	; 0x54
 8000c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c70:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c72:	f002 fbc1 	bl	80033f8 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c7c:	f000 fb6e 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c8e:	f002 ff73 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c98:	f000 fb60 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c9c:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000c9e:	f002 fc63 	bl	8003568 <HAL_TIM_OC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ca8:	f000 fb58 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000cbc:	f003 fb34 	bl	8004328 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cc6:	f000 fb49 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_TIM2_Init+0xe0>)
 8000ce2:	f002 fe2b 	bl	800393c <HAL_TIM_OC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cec:	f000 fb36 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3738      	adds	r7, #56	; 0x38
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200003e8 	.word	0x200003e8

08000cfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	; 0x38
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d2e:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <MX_TIM3_Init+0xe8>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d52:	4823      	ldr	r0, [pc, #140]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d54:	f002 fb50 	bl	80033f8 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d5e:	f000 fafd 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d70:	f002 ff02 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d7a:	f000 faef 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d80:	f002 fc4b 	bl	800361a <HAL_TIM_PWM_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d8a:	f000 fae7 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000d9e:	f003 fac3 	bl	8004328 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000da8:	f000 fad8 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dac:	2360      	movs	r3, #96	; 0x60
 8000dae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000dc4:	f002 fe16 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dce:	f000 fac5 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <MX_TIM3_Init+0xe4>)
 8000dd4:	f000 fb94 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8000dd8:	bf00      	nop
 8000dda:	3738      	adds	r7, #56	; 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200002cc 	.word	0x200002cc
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <MX_TIM4_Init+0xe8>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e3e:	4823      	ldr	r0, [pc, #140]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e40:	f002 fada 	bl	80033f8 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e4a:	f000 fa87 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e5c:	f002 fe8c 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e66:	f000 fa79 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e6c:	f002 fbd5 	bl	800361a <HAL_TIM_PWM_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e76:	f000 fa71 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	4619      	mov	r1, r3
 8000e88:	4810      	ldr	r0, [pc, #64]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000e8a:	f003 fa4d 	bl	8004328 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e94:	f000 fa62 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000eb0:	f002 fda0 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000eba:	f000 fa4f 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM4_Init+0xe4>)
 8000ec0:	f000 fb1e 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000178 	.word	0x20000178
 8000ed0:	40000800 	.word	0x40000800

08000ed4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	615a      	str	r2, [r3, #20]
 8000eea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <MX_TIM10_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 128;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f12:	4815      	ldr	r0, [pc, #84]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f14:	f002 fa70 	bl	80033f8 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000f1e:	f000 fa1d 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000f22:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f24:	f002 fb79 	bl	800361a <HAL_TIM_PWM_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000f2e:	f000 fa15 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f32:	2360      	movs	r3, #96	; 0x60
 8000f34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f4a:	f002 fd53 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000f54:	f000 fa02 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_TIM10_Init+0x94>)
 8000f5a:	f000 fad1 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000204 	.word	0x20000204
 8000f6c:	40014400 	.word	0x40014400

08000f70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_TIM11_Init+0x94>)
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <MX_TIM11_Init+0x98>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 128;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM11_Init+0x94>)
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM11_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_TIM11_Init+0x94>)
 8000f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM11_Init+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM11_Init+0x94>)
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_TIM11_Init+0x94>)
 8000fb0:	f002 fa22 	bl	80033f8 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000fba:	f000 f9cf 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_TIM11_Init+0x94>)
 8000fc0:	f002 fb2b 	bl	800361a <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000fca:	f000 f9c7 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fce:	2360      	movs	r3, #96	; 0x60
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <MX_TIM11_Init+0x94>)
 8000fe6:	f002 fd05 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000ff0:	f000 f9b4 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <MX_TIM11_Init+0x94>)
 8000ff6:	f000 fa83 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000035c 	.word	0x2000035c
 8001008:	40014800 	.word	0x40014800

0800100c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <MX_TIM13_Init+0x98>)
 8001028:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_TIM13_Init+0x94>)
 800102c:	2240      	movs	r2, #64	; 0x40
 800102e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <MX_TIM13_Init+0x94>)
 800104c:	f002 f9d4 	bl	80033f8 <HAL_TIM_Base_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001056:	f000 f981 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_TIM13_Init+0x94>)
 800105c:	f002 fadd 	bl	800361a <HAL_TIM_PWM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001066:	f000 f979 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106a:	2360      	movs	r3, #96	; 0x60
 800106c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001082:	f002 fcb7 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800108c:	f000 f966 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MX_TIM13_Init+0x94>)
 8001092:	f000 fa35 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000314 	.word	0x20000314
 80010a4:	40001c00 	.word	0x40001c00

080010a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_TIM14_Init+0x94>)
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <MX_TIM14_Init+0x98>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_TIM14_Init+0x94>)
 80010c8:	2240      	movs	r2, #64	; 0x40
 80010ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_TIM14_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM14_Init+0x94>)
 80010d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_TIM14_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_TIM14_Init+0x94>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010e6:	4815      	ldr	r0, [pc, #84]	; (800113c <MX_TIM14_Init+0x94>)
 80010e8:	f002 f986 	bl	80033f8 <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80010f2:	f000 f933 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_TIM14_Init+0x94>)
 80010f8:	f002 fa8f 	bl	800361a <HAL_TIM_PWM_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001102:	f000 f92b 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	; 0x60
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM14_Init+0x94>)
 800111e:	f002 fc69 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001128:	f000 f918 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM14_Init+0x94>)
 800112e:	f000 f9e7 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000430 	.word	0x20000430
 8001140:	40002000 	.word	0x40002000

08001144 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_UART4_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_UART4_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_UART4_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_UART4_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_UART4_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_UART4_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_UART4_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_UART4_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_UART4_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_UART4_Init+0x4c>)
 800117c:	f003 f950 	bl	8004420 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f8e9 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200003a4 	.word	0x200003a4
 8001194:	40004c00 	.word	0x40004c00

08001198 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_USART3_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011d0:	f003 f926 	bl	8004420 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f8bf 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001c0 	.word	0x200001c0
 80011e8:	40004800 	.word	0x40004800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <MX_GPIO_Init+0x160>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a50      	ldr	r2, [pc, #320]	; (800134c <MX_GPIO_Init+0x160>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b4e      	ldr	r3, [pc, #312]	; (800134c <MX_GPIO_Init+0x160>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <MX_GPIO_Init+0x160>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a49      	ldr	r2, [pc, #292]	; (800134c <MX_GPIO_Init+0x160>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <MX_GPIO_Init+0x160>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <MX_GPIO_Init+0x160>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a42      	ldr	r2, [pc, #264]	; (800134c <MX_GPIO_Init+0x160>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <MX_GPIO_Init+0x160>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b3c      	ldr	r3, [pc, #240]	; (800134c <MX_GPIO_Init+0x160>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a3b      	ldr	r2, [pc, #236]	; (800134c <MX_GPIO_Init+0x160>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <MX_GPIO_Init+0x160>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <MX_GPIO_Init+0x160>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a34      	ldr	r2, [pc, #208]	; (800134c <MX_GPIO_Init+0x160>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <MX_GPIO_Init+0x160>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2108      	movs	r1, #8
 8001292:	482f      	ldr	r0, [pc, #188]	; (8001350 <MX_GPIO_Init+0x164>)
 8001294:	f001 fc34 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800129e:	482d      	ldr	r0, [pc, #180]	; (8001354 <MX_GPIO_Init+0x168>)
 80012a0:	f001 fc2e 	bl	8002b00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80012a4:	2200      	movs	r2, #0
 80012a6:	f24e 017b 	movw	r1, #57467	; 0xe07b
 80012aa:	482b      	ldr	r0, [pc, #172]	; (8001358 <MX_GPIO_Init+0x16c>)
 80012ac:	f001 fc28 	bl	8002b00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012b0:	2308      	movs	r3, #8
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4822      	ldr	r0, [pc, #136]	; (8001350 <MX_GPIO_Init+0x164>)
 80012c8:	f001 fa7e 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012cc:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80012d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_GPIO_Init+0x168>)
 80012e6:	f001 fa6f 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_GPIO_Init+0x168>)
 8001304:	f001 fa60 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001308:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001312:	2301      	movs	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_GPIO_Init+0x16c>)
 8001322:	f001 fa51 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001326:	237b      	movs	r3, #123	; 0x7b
 8001328:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_GPIO_Init+0x16c>)
 800133e:	f001 fa43 	bl	80027c8 <HAL_GPIO_Init>

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	40021000 	.word	0x40021000
 8001358:	40020c00 	.word	0x40020c00

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_MspInit+0x4c>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a44      	ldr	r2, [pc, #272]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80013e6:	e076      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_TIM_Base_MspInit+0x130>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10e      	bne.n	8001410 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a3a      	ldr	r2, [pc, #232]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	623b      	str	r3, [r7, #32]
 800140c:	6a3b      	ldr	r3, [r7, #32]
}
 800140e:	e062      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a35      	ldr	r2, [pc, #212]	; (80014ec <HAL_TIM_Base_MspInit+0x134>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10e      	bne.n	8001438 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a30      	ldr	r2, [pc, #192]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
}
 8001436:	e04e      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <HAL_TIM_Base_MspInit+0x138>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10e      	bne.n	8001460 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
}
 800145e:	e03a      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_TIM_Base_MspInit+0x13c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10e      	bne.n	8001488 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
}
 8001486:	e026      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM13)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_TIM_Base_MspInit+0x140>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10e      	bne.n	80014b0 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
}
 80014ae:	e012      	b.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM14)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_TIM_Base_MspInit+0x144>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10d      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_TIM_Base_MspInit+0x12c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
}
 80014d6:	bf00      	nop
 80014d8:	372c      	adds	r7, #44	; 0x2c
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40000800 	.word	0x40000800
 80014f0:	40014400 	.word	0x40014400
 80014f4:	40014800 	.word	0x40014800
 80014f8:	40001c00 	.word	0x40001c00
 80014fc:	40002000 	.word	0x40002000

08001500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a6d      	ldr	r2, [pc, #436]	; (80016d4 <HAL_TIM_MspPostInit+0x1d4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d11e      	bne.n	8001560 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
 8001526:	4b6c      	ldr	r3, [pc, #432]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a6b      	ldr	r2, [pc, #428]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800153e:	2340      	movs	r3, #64	; 0x40
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001546:	2301      	movs	r3, #1
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2302      	movs	r3, #2
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800154e:	2302      	movs	r3, #2
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	4860      	ldr	r0, [pc, #384]	; (80016dc <HAL_TIM_MspPostInit+0x1dc>)
 800155a:	f001 f935 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800155e:	e0b5      	b.n	80016cc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM4)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_TIM_MspPostInit+0x1e0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11f      	bne.n	80015aa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2302      	movs	r3, #2
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001598:	2302      	movs	r3, #2
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4850      	ldr	r0, [pc, #320]	; (80016e4 <HAL_TIM_MspPostInit+0x1e4>)
 80015a4:	f001 f910 	bl	80027c8 <HAL_GPIO_Init>
}
 80015a8:	e090      	b.n	80016cc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a4e      	ldr	r2, [pc, #312]	; (80016e8 <HAL_TIM_MspPostInit+0x1e8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d11f      	bne.n	80015f4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4a46      	ldr	r2, [pc, #280]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	6313      	str	r3, [r2, #48]	; 0x30
 80015c4:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	2301      	movs	r3, #1
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2302      	movs	r3, #2
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80015e2:	2303      	movs	r3, #3
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	483f      	ldr	r0, [pc, #252]	; (80016ec <HAL_TIM_MspPostInit+0x1ec>)
 80015ee:	f001 f8eb 	bl	80027c8 <HAL_GPIO_Init>
}
 80015f2:	e06b      	b.n	80016cc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <HAL_TIM_MspPostInit+0x1f0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d11f      	bne.n	800163e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800161a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2302      	movs	r3, #2
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800162c:	2303      	movs	r3, #3
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	482d      	ldr	r0, [pc, #180]	; (80016ec <HAL_TIM_MspPostInit+0x1ec>)
 8001638:	f001 f8c6 	bl	80027c8 <HAL_GPIO_Init>
}
 800163c:	e046      	b.n	80016cc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <HAL_TIM_MspPostInit+0x1f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d11e      	bne.n	8001686 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166c:	2301      	movs	r3, #1
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	2302      	movs	r3, #2
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001674:	2309      	movs	r3, #9
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	481e      	ldr	r0, [pc, #120]	; (80016f8 <HAL_TIM_MspPostInit+0x1f8>)
 8001680:	f001 f8a2 	bl	80027c8 <HAL_GPIO_Init>
}
 8001684:	e022      	b.n	80016cc <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_TIM_MspPostInit+0x1fc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d11d      	bne.n	80016cc <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_TIM_MspPostInit+0x1d8>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b8:	2302      	movs	r3, #2
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80016bc:	2309      	movs	r3, #9
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <HAL_TIM_MspPostInit+0x1f8>)
 80016c8:	f001 f87e 	bl	80027c8 <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	3738      	adds	r7, #56	; 0x38
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40014400 	.word	0x40014400
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40014800 	.word	0x40014800
 80016f4:	40001c00 	.word	0x40001c00
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40002000 	.word	0x40002000

08001700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <HAL_UART_MspInit+0x108>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d134      	bne.n	800178c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_UART_MspInit+0x10c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_UART_MspInit+0x10c>)
 800172c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_UART_MspInit+0x10c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_UART_MspInit+0x10c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a31      	ldr	r2, [pc, #196]	; (800180c <HAL_UART_MspInit+0x10c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_UART_MspInit+0x10c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800175a:	2303      	movs	r3, #3
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001762:	2301      	movs	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800176a:	2308      	movs	r3, #8
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4826      	ldr	r0, [pc, #152]	; (8001810 <HAL_UART_MspInit+0x110>)
 8001776:	f001 f827 	bl	80027c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2034      	movs	r0, #52	; 0x34
 8001780:	f000 ff59 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001784:	2034      	movs	r0, #52	; 0x34
 8001786:	f000 ff72 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800178a:	e039      	b.n	8001800 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_UART_MspInit+0x114>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d134      	bne.n	8001800 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_UART_MspInit+0x10c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_UART_MspInit+0x10c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_UART_MspInit+0x10c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_UART_MspInit+0x10c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_UART_MspInit+0x10c>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_UART_MspInit+0x10c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017e0:	2307      	movs	r3, #7
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <HAL_UART_MspInit+0x118>)
 80017ec:	f000 ffec 	bl	80027c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	2027      	movs	r0, #39	; 0x27
 80017f6:	f000 ff1e 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017fa:	2027      	movs	r0, #39	; 0x27
 80017fc:	f000 ff37 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 8001800:	bf00      	nop
 8001802:	3730      	adds	r7, #48	; 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40004c00 	.word	0x40004c00
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	40004800 	.word	0x40004800
 8001818:	40020400 	.word	0x40020400

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 fdea 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <USART3_IRQHandler+0x10>)
 8001876:	f002 ff27 	bl	80046c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001c0 	.word	0x200001c0

08001884 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <UART4_IRQHandler+0x10>)
 800188a:	f002 ff1d 	bl	80046c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200003a4 	.word	0x200003a4

08001898 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00a      	b.n	80018c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018aa:	f3af 8000 	nop.w
 80018ae:	4601      	mov	r1, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	60ba      	str	r2, [r7, #8]
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf0      	blt.n	80018aa <_read+0x12>
	}

return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fa:	605a      	str	r2, [r3, #4]
	return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_isatty>:

int _isatty(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return 1;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f003 fd5a 	bl	8005424 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20020000 	.word	0x20020000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000098 	.word	0x20000098
 80019a4:	20000810 	.word	0x20000810

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <intent_reset>:
uint8_t idx[NUM_J];
uint8_t num[NUM_J];
struct intent_intent_t ring[NUM_J][INTENT_BUFSZ];
const struct intent_intent_t DECEL = {0, 0, 0, 0};

void intent_reset() {
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < NUM_J; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e026      	b.n	8001a26 <intent_reset+0x5a>
    idx[i] = 0;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <intent_reset+0x70>)
 80019dc:	2100      	movs	r1, #0
 80019de:	54d1      	strb	r1, [r2, r3]
    num[i] = 0;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <intent_reset+0x74>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < INTENT_BUFSZ; j++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	71bb      	strb	r3, [r7, #6]
 80019ec:	e015      	b.n	8001a1a <intent_reset+0x4e>
      ring[i][j] = DECEL;
 80019ee:	79f9      	ldrb	r1, [r7, #7]
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <intent_reset+0x78>)
 80019f4:	461a      	mov	r2, r3
 80019f6:	0052      	lsls	r2, r2, #1
 80019f8:	441a      	add	r2, r3
 80019fa:	0093      	lsls	r3, r2, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	460b      	mov	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	440b      	add	r3, r1
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	4413      	add	r3, r2
 8001a08:	4403      	add	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	6053      	str	r3, [r2, #4]
 8001a12:	6093      	str	r3, [r2, #8]
    for (uint8_t j = 0; j < INTENT_BUFSZ; j++) {
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	3301      	adds	r3, #1
 8001a18:	71bb      	strb	r3, [r7, #6]
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	d9e6      	bls.n	80019ee <intent_reset+0x22>
  for (uint8_t i = 0; i < NUM_J; i++) {
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	3301      	adds	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d9d5      	bls.n	80019d8 <intent_reset+0xc>
    }
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000048c 	.word	0x2000048c
 8001a40:	20000494 	.word	0x20000494
 8001a44:	2000049c 	.word	0x2000049c

08001a48 <intent_deserialize>:

void intent_deserialize(struct intent_intent_t* dest, const uint8_t* buf) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  dest->curve_id = *((uint8_t*)buf++);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	603a      	str	r2, [r7, #0]
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	701a      	strb	r2, [r3, #0]
  dest->shift_y = *((int16_t*)buf); buf += sizeof(int16_t);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	805a      	strh	r2, [r3, #2]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	603b      	str	r3, [r7, #0]
  dest->scale_y = *((int16_t*)buf); buf += sizeof(int16_t);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	809a      	strh	r2, [r3, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	603b      	str	r3, [r7, #0]
  dest->length_usec = *((uint32_t*)buf); 
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	609a      	str	r2, [r3, #8]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <intent_empty>:

bool intent_empty(uint8_t j) {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  return !num[j];
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <intent_empty+0x28>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000494 	.word	0x20000494

08001ac0 <intent_push>:

void intent_push(uint8_t j, const uint8_t *buf, uint8_t sz, struct intent_status_t *err) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	73bb      	strb	r3, [r7, #14]
  if (sz != INTENT_PACKET_SZ) {   
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d00c      	beq.n	8001af2 <intent_push+0x32>
    err->code = PUSH_ERR_INVALID;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
    snprintf(err->message, STATUS_MSG_SZ, "bad sz %d; want %d", sz, INTENT_PACKET_SZ);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	1c58      	adds	r0, r3, #1
 8001ae2:	7bbb      	ldrb	r3, [r7, #14]
 8001ae4:	2209      	movs	r2, #9
 8001ae6:	9200      	str	r2, [sp, #0]
 8001ae8:	4a70      	ldr	r2, [pc, #448]	; (8001cac <intent_push+0x1ec>)
 8001aea:	2120      	movs	r1, #32
 8001aec:	f003 fd68 	bl	80055c0 <sniprintf>
    return;
 8001af0:	e0d9      	b.n	8001ca6 <intent_push+0x1e6>
  } else if (j > NUM_J) {
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d90a      	bls.n	8001b0e <intent_push+0x4e>
    err->code = PUSH_ERR_INVALID;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
    snprintf(err->message, STATUS_MSG_SZ, "invalid joint");
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a6b      	ldr	r2, [pc, #428]	; (8001cb0 <intent_push+0x1f0>)
 8001b04:	2120      	movs	r1, #32
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fd5a 	bl	80055c0 <sniprintf>
    return;
 8001b0c:	e0cb      	b.n	8001ca6 <intent_push+0x1e6>
  } else if (num[j] == INTENT_BUFSZ) {
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	4a68      	ldr	r2, [pc, #416]	; (8001cb4 <intent_push+0x1f4>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d10a      	bne.n	8001b2e <intent_push+0x6e>
    err->code = PUSH_ERR_FULL;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	701a      	strb	r2, [r3, #0]
    snprintf(err->message, STATUS_MSG_SZ, "intent queue full");
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <intent_push+0x1f8>)
 8001b24:	2120      	movs	r1, #32
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fd4a 	bl	80055c0 <sniprintf>
    return;
 8001b2c:	e0bb      	b.n	8001ca6 <intent_push+0x1e6>
  } 
  struct intent_intent_t* dest = &(ring[j][(idx[j]+num[j]) % INTENT_BUFSZ]);
 8001b2e:	7bf9      	ldrb	r1, [r7, #15]
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	4a62      	ldr	r2, [pc, #392]	; (8001cbc <intent_push+0x1fc>)
 8001b34:	5cd2      	ldrb	r2, [r2, r3]
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	485e      	ldr	r0, [pc, #376]	; (8001cb4 <intent_push+0x1f4>)
 8001b3a:	5cc3      	ldrb	r3, [r0, r3]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	461a      	mov	r2, r3
 8001b46:	0052      	lsls	r2, r2, #1
 8001b48:	441a      	add	r2, r3
 8001b4a:	0093      	lsls	r3, r2, #2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	460b      	mov	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	015b      	lsls	r3, r3, #5
 8001b56:	4413      	add	r3, r2
 8001b58:	4a59      	ldr	r2, [pc, #356]	; (8001cc0 <intent_push+0x200>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	61fb      	str	r3, [r7, #28]
  intent_deserialize(dest, buf);
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	69f8      	ldr	r0, [r7, #28]
 8001b62:	f7ff ff71 	bl	8001a48 <intent_deserialize>
  LOG_DEBUG("J%d C%d - %d %d - T%u", j, dest->curve_id, dest->shift_y, dest->scale_y, (unsigned int) dest->length_usec);
 8001b66:	7bf9      	ldrb	r1, [r7, #15]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b74:	461c      	mov	r4, r3
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9200      	str	r2, [sp, #0]
 8001b86:	4623      	mov	r3, r4
 8001b88:	4602      	mov	r2, r0
 8001b8a:	484e      	ldr	r0, [pc, #312]	; (8001cc4 <intent_push+0x204>)
 8001b8c:	f003 fc8a 	bl	80054a4 <iprintf>

  if (dest->curve_id >= NCURVES) {
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d90a      	bls.n	8001bae <intent_push+0xee>
    err->code = PUSH_ERR_INVALID;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
    snprintf(err->message, STATUS_MSG_SZ, "invalid curve id");
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <intent_push+0x208>)
 8001ba4:	2120      	movs	r1, #32
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fd0a 	bl	80055c0 <sniprintf>
    return;
 8001bac:	e07b      	b.n	8001ca6 <intent_push+0x1e6>
  }

  if (!intent_empty(j)) {
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff6f 	bl	8001a94 <intent_empty>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f083 0301 	eor.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d066      	beq.n	8001c90 <intent_push+0x1d0>
    struct intent_intent_t* before = &(ring[j][(idx[j]+num[j]-1) % INTENT_BUFSZ]);
 8001bc2:	7bf9      	ldrb	r1, [r7, #15]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	4a3d      	ldr	r2, [pc, #244]	; (8001cbc <intent_push+0x1fc>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	4a39      	ldr	r2, [pc, #228]	; (8001cb4 <intent_push+0x1f4>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	4403      	add	r3, r0
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	425a      	negs	r2, r3
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	f002 0207 	and.w	r2, r2, #7
 8001be0:	bf58      	it	pl
 8001be2:	4253      	negpl	r3, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	0052      	lsls	r2, r2, #1
 8001be8:	441a      	add	r2, r3
 8001bea:	0093      	lsls	r3, r2, #2
 8001bec:	461a      	mov	r2, r3
 8001bee:	460b      	mov	r3, r1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	440b      	add	r3, r1
 8001bf4:	015b      	lsls	r3, r3, #5
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <intent_push+0x200>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
    int16_t before_end = (CURVES[before->curve_id][CURVE_SZ-1] * before->scale_y / 256) + before->shift_y;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <intent_push+0x20c>)
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	4413      	add	r3, r2
 8001c08:	331e      	adds	r3, #30
 8001c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c16:	fb03 f302 	mul.w	r3, r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <intent_push+0x160>
 8001c1e:	33ff      	adds	r3, #255	; 0xff
 8001c20:	121b      	asrs	r3, r3, #8
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	82fb      	strh	r3, [r7, #22]
    int16_t dest_start = (CURVES[dest->curve_id][0] * dest->scale_y / 256) + dest->shift_y;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <intent_push+0x20c>)
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	461a      	mov	r2, r3
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c48:	fb03 f302 	mul.w	r3, r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da00      	bge.n	8001c52 <intent_push+0x192>
 8001c50:	33ff      	adds	r3, #255	; 0xff
 8001c52:	121b      	asrs	r3, r3, #8
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	82bb      	strh	r3, [r7, #20]
    if (before_end != dest_start) {
 8001c64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d00f      	beq.n	8001c90 <intent_push+0x1d0>
      err->code = PUSH_ERR_DISJOINT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	701a      	strb	r2, [r3, #0]
      snprintf(err->message, STATUS_MSG_SZ, "disjoint (%d -> %d)", before_end, dest_start);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c58      	adds	r0, r3, #1
 8001c7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <intent_push+0x210>)
 8001c88:	2120      	movs	r1, #32
 8001c8a:	f003 fc99 	bl	80055c0 <sniprintf>
      return;
 8001c8e:	e00a      	b.n	8001ca6 <intent_push+0x1e6>
    }
  } 

  num[j]++; 
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <intent_push+0x1f4>)
 8001c94:	5cd2      	ldrb	r2, [r2, r3]
 8001c96:	3201      	adds	r2, #1
 8001c98:	b2d1      	uxtb	r1, r2
 8001c9a:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <intent_push+0x1f4>)
 8001c9c:	54d1      	strb	r1, [r2, r3]
  err->code = PUSH_OK;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  return;
 8001ca4:	bf00      	nop
}
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	08006818 	.word	0x08006818
 8001cb0:	0800682c 	.word	0x0800682c
 8001cb4:	20000494 	.word	0x20000494
 8001cb8:	0800683c 	.word	0x0800683c
 8001cbc:	2000048c 	.word	0x2000048c
 8001cc0:	2000049c 	.word	0x2000049c
 8001cc4:	08006850 	.word	0x08006850
 8001cc8:	0800686c 	.word	0x0800686c
 8001ccc:	08006960 	.word	0x08006960
 8001cd0:	08006880 	.word	0x08006880

08001cd4 <intent_get>:
const struct intent_intent_t* intent_get(const uint8_t j) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  return &(ring[j][idx[j]]);
 8001cde:	79f9      	ldrb	r1, [r7, #7]
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <intent_get+0x38>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	0052      	lsls	r2, r2, #1
 8001cea:	441a      	add	r2, r3
 8001cec:	0093      	lsls	r3, r2, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	440b      	add	r3, r1
 8001cf6:	015b      	lsls	r3, r3, #5
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <intent_get+0x3c>)
 8001cfc:	4413      	add	r3, r2
};
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000048c 	.word	0x2000048c
 8001d10:	2000049c 	.word	0x2000049c

08001d14 <intent_pop>:
bool intent_pop(const uint8_t j) {
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if (num[j] == 0) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <intent_pop+0x7c>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <intent_pop+0x18>
    return false;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e02b      	b.n	8001d84 <intent_pop+0x70>
  }
  ring[j][idx[j]] = DECEL;
 8001d2c:	79f9      	ldrb	r1, [r7, #7]
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <intent_pop+0x80>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	4818      	ldr	r0, [pc, #96]	; (8001d98 <intent_pop+0x84>)
 8001d36:	461a      	mov	r2, r3
 8001d38:	0052      	lsls	r2, r2, #1
 8001d3a:	441a      	add	r2, r3
 8001d3c:	0093      	lsls	r3, r2, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	460b      	mov	r3, r1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	440b      	add	r3, r1
 8001d46:	015b      	lsls	r3, r3, #5
 8001d48:	4413      	add	r3, r2
 8001d4a:	4403      	add	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	6053      	str	r3, [r2, #4]
 8001d54:	6093      	str	r3, [r2, #8]
  idx[j] = (idx[j] + 1) % INTENT_BUFSZ;
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <intent_pop+0x80>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	425a      	negs	r2, r3
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	f002 0207 	and.w	r2, r2, #7
 8001d68:	bf58      	it	pl
 8001d6a:	4253      	negpl	r3, r2
 8001d6c:	79fa      	ldrb	r2, [r7, #7]
 8001d6e:	b2d9      	uxtb	r1, r3
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <intent_pop+0x80>)
 8001d72:	5499      	strb	r1, [r3, r2]
  num[j]--;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <intent_pop+0x7c>)
 8001d78:	5cd2      	ldrb	r2, [r2, r3]
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	b2d1      	uxtb	r1, r2
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <intent_pop+0x7c>)
 8001d80:	54d1      	strb	r1, [r2, r3]
  return true;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	20000494 	.word	0x20000494
 8001d94:	2000048c 	.word	0x2000048c
 8001d98:	2000049c 	.word	0x2000049c

08001d9c <intent_free>:
uint8_t intent_free(const uint8_t j) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  return INTENT_BUFSZ - num[j];
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <intent_free+0x24>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	f1c3 0308 	rsb	r3, r3, #8
 8001db0:	b2db      	uxtb	r3, r3
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000494 	.word	0x20000494

08001dc4 <setup>:

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

void setup() {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  LOG_INFO("Setup begin for %d joint robot (report every %dms)", NUM_J, REPORT_PD_MILLIS);
 8001dc8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dcc:	2106      	movs	r1, #6
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <setup+0x28>)
 8001dd0:	f003 fb68 	bl	80054a4 <iprintf>
  pid_reset();
 8001dd4:	f000 fa4c 	bl	8002270 <pid_reset>
  intent_reset();
 8001dd8:	f7ff fdf8 	bl	80019cc <intent_reset>

  // TODO configure limit switch interrupts

  LOG_INFO("Printing firmware settings:");
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <setup+0x2c>)
 8001dde:	f003 fbe7 	bl	80055b0 <puts>
  // TODO

  LOG_INFO("Setup complete");
 8001de2:	4804      	ldr	r0, [pc, #16]	; (8001df4 <setup+0x30>)
 8001de4:	f003 fbe4 	bl	80055b0 <puts>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	08006894 	.word	0x08006894
 8001df0:	080068cc 	.word	0x080068cc
 8001df4:	080068ec 	.word	0x080068ec

08001df8 <on_message>:

void on_message(uint8_t* bufptr, uint8_t sz) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  struct intent_status_t status;
  if (!motion_decelerating()) {
 8001e04:	f000 f888 	bl	8001f18 <motion_decelerating>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f083 0301 	eor.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <on_message+0x3a>
    uint8_t j = bufptr[0];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    intent_push(j, (bufptr+1), sz-1, &status);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	1c59      	adds	r1, r3, #1
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8001e2e:	f7ff fe47 	bl	8001ac0 <intent_push>
  }

  if (status.code != PUSH_OK) {
 8001e32:	7b3b      	ldrb	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <on_message+0x56>
	LOG_ERROR("PUSH ERR %d: %s", status.code, status.message);
 8001e38:	7b3b      	ldrb	r3, [r7, #12]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	3301      	adds	r3, #1
 8001e42:	461a      	mov	r2, r3
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <on_message+0x60>)
 8001e46:	f003 fb2d 	bl	80054a4 <iprintf>
	motion_decelerate();
 8001e4a:	f000 f83b 	bl	8001ec4 <motion_decelerate>
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3730      	adds	r7, #48	; 0x30
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	08006900 	.word	0x08006900

08001e5c <loop>:

#define MOTION_LOOP_PD_MICROS 10000
uint32_t next_motion_update = 0;
void loop() {
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  // NOTE: Casting directly to struct requires both the same endianness and same interpetation of floating point
  // numbers. (see https://stackoverflow.com/questions/13775893/converting-struct-to-byte-and-back-to-struct)
  // Explicit deserialization prevents unexpected errors in data format.
  

  uint32_t now = hal_micros();
 8001e62:	f7fe fc09 	bl	8000678 <hal_micros>
 8001e66:	6078      	str	r0, [r7, #4]
  if (next_motion_update < UINT32_MAX && now > UINT32_MAX) {
    // Handle overflow period
    return;
  } else if (now > next_motion_update) {
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <loop+0x60>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d921      	bls.n	8001eb6 <loop+0x5a>
    motion_read();
 8001e72:	f000 f969 	bl	8002148 <motion_read>
    motion_write();
 8001e76:	f000 f85f 	bl	8001f38 <motion_write>

    uint8_t *wbuf = comms_preWrite(MOTION_MSG_SZ + sizeof(uint64_t));
 8001e7a:	2040      	movs	r0, #64	; 0x40
 8001e7c:	f7fe fbc4 	bl	8000608 <comms_preWrite>
 8001e80:	6038      	str	r0, [r7, #0]
    if (wbuf != NULL) {
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <loop+0x48>
      motion_serialize(wbuf);
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f000 f987 	bl	800219c <motion_serialize>
      // Also add the current micros so we can check for sync
      *((uint32_t*) (wbuf + MOTION_MSG_SZ)) = hal_micros();
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001e94:	f7fe fbf0 	bl	8000678 <hal_micros>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	6023      	str	r3, [r4, #0]
      comms_flush(MOTION_MSG_SZ + sizeof(uint64_t));
 8001e9c:	2040      	movs	r0, #64	; 0x40
 8001e9e:	f7fe fbd1 	bl	8000644 <comms_flush>
 8001ea2:	e002      	b.n	8001eaa <loop+0x4e>
    } else {
      LOG_ERROR("null wbuf");
 8001ea4:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <loop+0x64>)
 8001ea6:	f003 fb83 	bl	80055b0 <puts>
    }
    next_motion_update = now + MOTION_LOOP_PD_MICROS;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001eb0:	3310      	adds	r3, #16
 8001eb2:	4a02      	ldr	r2, [pc, #8]	; (8001ebc <loop+0x60>)
 8001eb4:	6013      	str	r3, [r2, #0]
  }
}
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}
 8001ebc:	2000009c 	.word	0x2000009c
 8001ec0:	08006914 	.word	0x08006914

08001ec4 <motion_decelerate>:
int16_t enc[NUM_J];
int16_t vel[NUM_J];
int16_t decel_vel_start[NUM_J];
uint32_t curve_start_usec = 0;

void motion_decelerate() {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  motion_mask = 1;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <motion_decelerate+0x44>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
  curve_start_usec = hal_micros();
 8001ed0:	f7fe fbd2 	bl	8000678 <hal_micros>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <motion_decelerate+0x48>)
 8001ed8:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < NUM_J; i++) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	e00a      	b.n	8001ef6 <motion_decelerate+0x32>
    decel_vel_start[i] = vel[i];
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <motion_decelerate+0x4c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <motion_decelerate+0x50>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < NUM_J; i++) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	ddf1      	ble.n	8001ee0 <motion_decelerate+0x1c>
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200000a0 	.word	0x200000a0
 8001f0c:	200000a4 	.word	0x200000a4
 8001f10:	2000070c 	.word	0x2000070c
 8001f14:	200006f4 	.word	0x200006f4

08001f18 <motion_decelerating>:
bool motion_decelerating() {
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return (motion_mask == 1);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <motion_decelerating+0x1c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200000a0 	.word	0x200000a0

08001f38 <motion_write>:

// Note: this is likely called inside a timer interrupt
// so care must be taken to keep overall cycles light.
// Logging and other debugging calls are prohibited.
void motion_write() {
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b08b      	sub	sp, #44	; 0x2c
 8001f3c:	af02      	add	r7, sp, #8
  uint32_t now = hal_micros(); // note: truncated from uint64
 8001f3e:	f7fe fb9b 	bl	8000678 <hal_micros>
 8001f42:	6178      	str	r0, [r7, #20]
  if (motion_decelerating()) {
 8001f44:	f7ff ffe8 	bl	8001f18 <motion_decelerating>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d062      	beq.n	8002014 <motion_write+0xdc>
    uint32_t dt_usec = now - curve_start_usec;
 8001f4e:	4b74      	ldr	r3, [pc, #464]	; (8002120 <motion_write+0x1e8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	607b      	str	r3, [r7, #4]
    uint32_t velsum = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < NUM_J; i++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	76fb      	strb	r3, [r7, #27]
 8001f60:	e04b      	b.n	8001ffa <motion_write+0xc2>
      int32_t decel_amt = (settings_DECEL_RATE[i] * (dt_usec/1000)) / 1000;
 8001f62:	7efb      	ldrb	r3, [r7, #27]
 8001f64:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <motion_write+0x1ec>)
 8001f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <motion_write+0x1f0>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	fb03 f301 	mul.w	r3, r3, r1
 8001f7a:	4a6b      	ldr	r2, [pc, #428]	; (8002128 <motion_write+0x1f0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	603b      	str	r3, [r7, #0]
      if (decel_vel_start[i] > 0) {
 8001f84:	7efb      	ldrb	r3, [r7, #27]
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <motion_write+0x1f4>)
 8001f88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dd0e      	ble.n	8001fae <motion_write+0x76>
        vel[i] = MAX(0, decel_vel_start[i] - decel_amt);
 8001f90:	7efb      	ldrb	r3, [r7, #27]
 8001f92:	4a66      	ldr	r2, [pc, #408]	; (800212c <motion_write+0x1f4>)
 8001f94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8001fa2:	7efb      	ldrb	r3, [r7, #27]
 8001fa4:	b211      	sxth	r1, r2
 8001fa6:	4a62      	ldr	r2, [pc, #392]	; (8002130 <motion_write+0x1f8>)
 8001fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001fac:	e00d      	b.n	8001fca <motion_write+0x92>
      } else {
        vel[i] = MIN(0, decel_vel_start[i] + decel_amt);
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	4a5e      	ldr	r2, [pc, #376]	; (800212c <motion_write+0x1f4>)
 8001fb2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	ea03 72e3 	and.w	r2, r3, r3, asr #31
 8001fc0:	7efb      	ldrb	r3, [r7, #27]
 8001fc2:	b211      	sxth	r1, r2
 8001fc4:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <motion_write+0x1f8>)
 8001fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      }
      velsum += ABS(vel[i]);
 8001fca:	7efb      	ldrb	r3, [r7, #27]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <motion_write+0x1f8>)
 8001fce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	dd05      	ble.n	8001fe2 <motion_write+0xaa>
 8001fd6:	7efb      	ldrb	r3, [r7, #27]
 8001fd8:	4a55      	ldr	r2, [pc, #340]	; (8002130 <motion_write+0x1f8>)
 8001fda:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	e005      	b.n	8001fee <motion_write+0xb6>
 8001fe2:	7efb      	ldrb	r3, [r7, #27]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <motion_write+0x1f8>)
 8001fe6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001fea:	425b      	negs	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < NUM_J; i++) {
 8001ff4:	7efb      	ldrb	r3, [r7, #27]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	76fb      	strb	r3, [r7, #27]
 8001ffa:	7efb      	ldrb	r3, [r7, #27]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d9b0      	bls.n	8001f62 <motion_write+0x2a>
    }
    // LOG_DEBUG("ST %d RT %d DT %d -> VEL %d", decel_vel_start[0], settings_DECEL_RATE[0], dt_usec, vel[0]);
    if (!velsum) { // We've stopped
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 8086 	bne.w	8002114 <motion_write+0x1dc>
      intent_reset();
 8002008:	f7ff fce0 	bl	80019cc <intent_reset>
      motion_mask = 0;
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <motion_write+0x1fc>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
    }
    return;
 8002012:	e07f      	b.n	8002114 <motion_write+0x1dc>
  }

  for (uint8_t i = 0; i < NUM_J; i++) {
 8002014:	2300      	movs	r3, #0
 8002016:	76bb      	strb	r3, [r7, #26]
 8002018:	e078      	b.n	800210c <motion_write+0x1d4>
    if (intent_empty(i)) {
 800201a:	7ebb      	ldrb	r3, [r7, #26]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fd39 	bl	8001a94 <intent_empty>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <motion_write+0x102>
      if (vel[i] != 0) {
 8002028:	7ebb      	ldrb	r3, [r7, #26]
 800202a:	4a41      	ldr	r2, [pc, #260]	; (8002130 <motion_write+0x1f8>)
 800202c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d067      	beq.n	8002104 <motion_write+0x1cc>
        motion_decelerate();
 8002034:	f7ff ff46 	bl	8001ec4 <motion_decelerate>
        return;
 8002038:	e06f      	b.n	800211a <motion_write+0x1e2>
      }
      continue;
    }
    const struct intent_intent_t* jc = intent_get(i);
 800203a:	7ebb      	ldrb	r3, [r7, #26]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe49 	bl	8001cd4 <intent_get>
 8002042:	6138      	str	r0, [r7, #16]
    
    // Compute where we should be in the curve we're playing out
    // TODO handle overflow
    uint16_t curve_idx = ((now - curve_start_usec) * CURVE_SZ) / jc->length_usec;
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <motion_write+0x1e8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	011a      	lsls	r2, r3, #4
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	81fb      	strh	r3, [r7, #14]
    // LOG_DEBUG("%u %u %u -> %d", now, curve_start_usec, jc.length_usec, curve_idx);
    if (curve_idx >= CURVE_SZ) {
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	d913      	bls.n	8002086 <motion_write+0x14e>
      intent_pop(i);
 800205e:	7ebb      	ldrb	r3, [r7, #26]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe57 	bl	8001d14 <intent_pop>
      const struct intent_intent_t* jnext = intent_get(i);
 8002066:	7ebb      	ldrb	r3, [r7, #26]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fe33 	bl	8001cd4 <intent_get>
 800206e:	60b8      	str	r0, [r7, #8]
      curve_start_usec = now;
 8002070:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <motion_write+0x1e8>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6013      	str	r3, [r2, #0]
      LOG_DEBUG("pop %d; next: C%d", i, jnext->curve_id);
 8002076:	7eb9      	ldrb	r1, [r7, #26]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	482e      	ldr	r0, [pc, #184]	; (8002138 <motion_write+0x200>)
 8002080:	f003 fa10 	bl	80054a4 <iprintf>
      return;
 8002084:	e049      	b.n	800211a <motion_write+0x1e2>
    }

    // TODO linear interpolate between curve_idx and next value, where possible

    // Divide by 256 to account for scale_y being fixed-point
    int16_t vel_tgt = (CURVES[jc->curve_id][curve_idx] * jc->scale_y / 256) + jc->shift_y;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	89fb      	ldrh	r3, [r7, #14]
 800208e:	492b      	ldr	r1, [pc, #172]	; (800213c <motion_write+0x204>)
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	4413      	add	r3, r2
 8002094:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002098:	461a      	mov	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020a0:	fb03 f302 	mul.w	r3, r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da00      	bge.n	80020aa <motion_write+0x172>
 80020a8:	33ff      	adds	r3, #255	; 0xff
 80020aa:	121b      	asrs	r3, r3, #8
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	81bb      	strh	r3, [r7, #12]
    if (!pid_update(&(vel[i]), i, pos[i], enc[i], vel_tgt)) {
 80020bc:	7ebb      	ldrb	r3, [r7, #26]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <motion_write+0x1f8>)
 80020c2:	1898      	adds	r0, r3, r2
 80020c4:	7ebb      	ldrb	r3, [r7, #26]
 80020c6:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <motion_write+0x208>)
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	7ebb      	ldrb	r3, [r7, #26]
 80020d0:	491c      	ldr	r1, [pc, #112]	; (8002144 <motion_write+0x20c>)
 80020d2:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 80020d6:	7eb9      	ldrb	r1, [r7, #26]
 80020d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4623      	mov	r3, r4
 80020e0:	f000 f91a 	bl	8002318 <pid_update>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d113      	bne.n	8002118 <motion_write+0x1e0>
      return; // TODO throw error
    }
    hal_setStepRate(i, vel[i]);
 80020f0:	7ebb      	ldrb	r3, [r7, #26]
 80020f2:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <motion_write+0x1f8>)
 80020f4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80020f8:	7ebb      	ldrb	r3, [r7, #26]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fb0f 	bl	8000720 <hal_setStepRate>
 8002102:	e000      	b.n	8002106 <motion_write+0x1ce>
      continue;
 8002104:	bf00      	nop
  for (uint8_t i = 0; i < NUM_J; i++) {
 8002106:	7ebb      	ldrb	r3, [r7, #26]
 8002108:	3301      	adds	r3, #1
 800210a:	76bb      	strb	r3, [r7, #26]
 800210c:	7ebb      	ldrb	r3, [r7, #26]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d983      	bls.n	800201a <motion_write+0xe2>
 8002112:	e002      	b.n	800211a <motion_write+0x1e2>
    return;
 8002114:	bf00      	nop
 8002116:	e000      	b.n	800211a <motion_write+0x1e2>
      return; // TODO throw error
 8002118:	bf00      	nop
  }
}
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}
 8002120:	200000a4 	.word	0x200000a4
 8002124:	080069e0 	.word	0x080069e0
 8002128:	10624dd3 	.word	0x10624dd3
 800212c:	200006f4 	.word	0x200006f4
 8002130:	2000070c 	.word	0x2000070c
 8002134:	200000a0 	.word	0x200000a0
 8002138:	08006924 	.word	0x08006924
 800213c:	08006960 	.word	0x08006960
 8002140:	200006dc 	.word	0x200006dc
 8002144:	20000700 	.word	0x20000700

08002148 <motion_read>:

void motion_read() {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_J; i++) {
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	e017      	b.n	8002184 <motion_read+0x3c>
    enc[i] = hal_readEnc(i);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe faf6 	bl	800074a <hal_readEnc>
 800215e:	4603      	mov	r3, r0
 8002160:	4619      	mov	r1, r3
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <motion_read+0x4c>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    pos[i] = hal_readSteps(i);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe faf8 	bl	8000764 <hal_readSteps>
 8002174:	4602      	mov	r2, r0
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <motion_read+0x50>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < NUM_J; i++) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3301      	adds	r3, #1
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b05      	cmp	r3, #5
 8002188:	dde4      	ble.n	8002154 <motion_read+0xc>
  }
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000700 	.word	0x20000700
 8002198:	200006dc 	.word	0x200006dc

0800219c <motion_serialize>:

void motion_serialize(uint8_t* buf) {
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = buf;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	61fb      	str	r3, [r7, #28]
  *(ptr++) = limit_mask;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	61fa      	str	r2, [r7, #28]
 80021ae:	4a2b      	ldr	r2, [pc, #172]	; (800225c <motion_serialize+0xc0>)
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
  *(ptr++) = motion_mask;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	4a29      	ldr	r2, [pc, #164]	; (8002260 <motion_serialize+0xc4>)
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_J; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e00c      	b.n	80021e0 <motion_serialize+0x44>
    *(ptr++) = intent_free(i);
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	69fc      	ldr	r4, [r7, #28]
 80021cc:	1c63      	adds	r3, r4, #1
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7ff fde3 	bl	8001d9c <intent_free>
 80021d6:	4603      	mov	r3, r0
 80021d8:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < NUM_J; i++) {
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	3301      	adds	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	ddef      	ble.n	80021c6 <motion_serialize+0x2a>
  }
  for (int i = 0; i < NUM_J; i++) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e00b      	b.n	8002204 <motion_serialize+0x68>
    *((int32_t*)ptr) = pos[i];
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <motion_serialize+0xc8>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	601a      	str	r2, [r3, #0]
    ptr += sizeof(int32_t);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3304      	adds	r3, #4
 80021fc:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < NUM_J; i++) {
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b05      	cmp	r3, #5
 8002208:	ddf0      	ble.n	80021ec <motion_serialize+0x50>
  } 
  for (int i = 0; i < NUM_J; i++) {
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e00b      	b.n	8002228 <motion_serialize+0x8c>
    *((int16_t*)ptr) = vel[i];
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <motion_serialize+0xcc>)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	801a      	strh	r2, [r3, #0]
    ptr += sizeof(int16_t);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3302      	adds	r3, #2
 8002220:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < NUM_J; i++) {
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	3301      	adds	r3, #1
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b05      	cmp	r3, #5
 800222c:	ddf0      	ble.n	8002210 <motion_serialize+0x74>
  } 
  for (int i = 0; i < NUM_J; i++) {
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e00b      	b.n	800224c <motion_serialize+0xb0>
    *((int16_t*)ptr) = enc[i];
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <motion_serialize+0xd0>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	801a      	strh	r2, [r3, #0]
    ptr += sizeof(int16_t);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3302      	adds	r3, #2
 8002244:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < NUM_J; i++) {
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b05      	cmp	r3, #5
 8002250:	ddf0      	ble.n	8002234 <motion_serialize+0x98>
  } 
}
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	3724      	adds	r7, #36	; 0x24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	200000a1 	.word	0x200000a1
 8002260:	200000a0 	.word	0x200000a0
 8002264:	200006dc 	.word	0x200006dc
 8002268:	2000070c 	.word	0x2000070c
 800226c:	20000700 	.word	0x20000700

08002270 <pid_reset>:
bool active[NUM_J];

const uint16_t steps_per_rev[NUM_J] = STEPS_PER_REV;
const uint16_t encoder_usec_per_rev[NUM_J] = ENCODER_TICKS_PER_REV;

void pid_reset() {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_J; i++) {
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	e036      	b.n	80022ea <pid_reset+0x7a>
    prev_pos[i] = 0;
 800227c:	4a20      	ldr	r2, [pc, #128]	; (8002300 <pid_reset+0x90>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2100      	movs	r1, #0
 8002282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    prev_vel[i] = 0;
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <pid_reset+0x94>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
    prev_err_vel[i] = 0;
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <pid_reset+0x98>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    err_vel[i] = 0;
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <pid_reset+0x9c>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
    err_pos[i] = 0;
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <pid_reset+0xa0>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2100      	movs	r1, #0
 80022b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int j = 0; j < 3; j++) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	e00e      	b.n	80022de <pid_reset+0x6e>
      pid_updates[i][j] = 0;
 80022c0:	4914      	ldr	r1, [pc, #80]	; (8002314 <pid_reset+0xa4>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 3; j++) {
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	dded      	ble.n	80022c0 <pid_reset+0x50>
  for (int i = 0; i < NUM_J; i++) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3301      	adds	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	ddc5      	ble.n	800227c <pid_reset+0xc>
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200007c8 	.word	0x200007c8
 8002304:	20000750 	.word	0x20000750
 8002308:	200007e0 	.word	0x200007e0
 800230c:	20000718 	.word	0x20000718
 8002310:	20000730 	.word	0x20000730
 8002314:	20000768 	.word	0x20000768

08002318 <pid_update>:

bool pid_update(int16_t* dest, uint8_t j, int16_t pos, int16_t pos_target, int16_t vel_target) {
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	72fb      	strb	r3, [r7, #11]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  // could be quite noisy.
  // TODO tweak dest by applying PID to pos, vel, enc
  // IMPORTANT: discrete derivative can be noisy, should apply filtering or else PID may behave strangely.
  // TODO anti-windup on the I component to prevent the robot fighting a colliding object
  
  *dest = vel_target;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8b3a      	ldrh	r2, [r7, #24]
 8002336:	801a      	strh	r2, [r3, #0]
  return true;
 8002338:	2301      	movs	r3, #1
} 
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800234e:	490e      	ldr	r1, [pc, #56]	; (8002388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002364:	4c0b      	ldr	r4, [pc, #44]	; (8002394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002372:	f7ff fb19 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002376:	f003 f85b 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237a:	f7fe fbbd 	bl	8000af8 <main>
  bx  lr    
 800237e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800238c:	08006a94 	.word	0x08006a94
  ldr r2, =_sbss
 8002390:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002394:	2000080c 	.word	0x2000080c

08002398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC_IRQHandler>
	...

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_Init+0x40>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_Init+0x40>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_Init+0x40>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f92b 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f808 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7fe ffca 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f943 	bl	800268a <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800241c:	f000 f90b 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000000 	.word	0x20000000
 8002438:	20000008 	.word	0x20000008
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	200007f8 	.word	0x200007f8

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200007f8 	.word	0x200007f8

08002480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff feda 	bl	8002468 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d008      	beq.n	80026d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e052      	b.n	800277a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0216 	bic.w	r2, r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_DMA_Abort+0x62>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0208 	bic.w	r2, r2, #8
 8002712:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002724:	e013      	b.n	800274e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002726:	f7ff fe9f 	bl	8002468 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b05      	cmp	r3, #5
 8002732:	d90c      	bls.n	800274e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2203      	movs	r2, #3
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e015      	b.n	800277a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e4      	bne.n	8002726 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	223f      	movs	r2, #63	; 0x3f
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e00c      	b.n	80027ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2205      	movs	r2, #5
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e16b      	b.n	8002abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 815a 	bne.w	8002ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80b4 	beq.w	8002ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a5f      	ldr	r2, [pc, #380]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a5b      	ldr	r2, [pc, #364]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_GPIO_Init+0x314>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <HAL_GPIO_Init+0x226>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_GPIO_Init+0x318>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d025      	beq.n	80029ea <HAL_GPIO_Init+0x222>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01f      	beq.n	80029e6 <HAL_GPIO_Init+0x21e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x320>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d019      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_GPIO_Init+0x324>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x216>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_GPIO_Init+0x328>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_GPIO_Init+0x32c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	; (8002af8 <HAL_GPIO_Init+0x330>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00e      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029d2:	2308      	movs	r3, #8
 80029d4:	e00c      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029d6:	2306      	movs	r3, #6
 80029d8:	e00a      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x228>
 80029ee:	2300      	movs	r3, #0
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a00:	4935      	ldr	r1, [pc, #212]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a32:	4a32      	ldr	r2, [pc, #200]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	f67f ae90 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021800 	.word	0x40021800
 8002af8:	40021c00 	.word	0x40021c00
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	041a      	lsls	r2, r3, #16
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	400b      	ands	r3, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e264      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	4ba3      	ldr	r3, [pc, #652]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00c      	beq.n	8002bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d112      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b9d      	ldr	r3, [pc, #628]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b99      	ldr	r3, [pc, #612]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e23f      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x74>
 8002bce:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x98>
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a8a      	ldr	r2, [pc, #552]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a87      	ldr	r2, [pc, #540]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002c00:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a80      	ldr	r2, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fc22 	bl	8002468 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff fc1e 	bl	8002468 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e204      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff fc0e 	bl	8002468 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff fc0a 	bl	8002468 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1f0      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1c4      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4952      	ldr	r1, [pc, #328]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e03a      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7ff fbc3 	bl	8002468 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fbbf 	bl	8002468 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1a5      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4940      	ldr	r1, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fba2 	bl	8002468 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff fb9e 	bl	8002468 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e184      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d030      	beq.n	8002db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7ff fb82 	bl	8002468 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7ff fb7e 	bl	8002468 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e164      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x200>
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fb6b 	bl	8002468 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	f7ff fb67 	bl	8002468 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e14d      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a0 	beq.w	8002f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d121      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7ff fb2d 	bl	8002468 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e011      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ce>
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
 8002e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7ff fb20 	bl	8002468 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e106      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <HAL_RCC_OscConfig+0x4e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2f0>
 8002e4a:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	e01c      	b.n	8002e92 <HAL_RCC_OscConfig+0x32a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x312>
 8002e60:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x32a>
 8002e7a:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a74      	ldr	r2, [pc, #464]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b72      	ldr	r3, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a71      	ldr	r2, [pc, #452]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d015      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7ff fae5 	bl	8002468 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7ff fae1 	bl	8002468 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0c5      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x33a>
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff facf 	bl	8002468 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7ff facb 	bl	8002468 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0af      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ee      	bne.n	8002ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b56      	ldr	r3, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 809b 	beq.w	8003042 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d05c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d141      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7ff fa9f 	bl	8002468 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7ff fa9b 	bl	8002468 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e081      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff fa74 	bl	8002468 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff fa70 	bl	8002468 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e056      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x41c>
 8002fa2:	e04e      	b.n	8003042 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff fa5d 	bl	8002468 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7ff fa59 	bl	8002468 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e03f      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc4:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x44a>
 8002fd0:	e037      	b.n	8003042 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e032      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d028      	beq.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d11a      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003014:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003016:	4293      	cmp	r3, r2
 8003018:	d111      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d107      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40007000 	.word	0x40007000
 8003050:	40023800 	.word	0x40023800
 8003054:	42470060 	.word	0x42470060

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0cc      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e067      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4934      	ldr	r1, [pc, #208]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7ff f98e 	bl	8002468 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7ff f98a 	bl	8002468 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20c      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	490a      	ldr	r1, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f8ee 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	08006948 	.word	0x08006948
 800321c:	20000000 	.word	0x20000000
 8003220:	20000004 	.word	0x20000004

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	b5b0      	push	{r4, r5, r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322a:	2100      	movs	r1, #0
 800322c:	6079      	str	r1, [r7, #4]
 800322e:	2100      	movs	r1, #0
 8003230:	60f9      	str	r1, [r7, #12]
 8003232:	2100      	movs	r1, #0
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003236:	2100      	movs	r1, #0
 8003238:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323a:	4952      	ldr	r1, [pc, #328]	; (8003384 <HAL_RCC_GetSysClockFreq+0x160>)
 800323c:	6889      	ldr	r1, [r1, #8]
 800323e:	f001 010c 	and.w	r1, r1, #12
 8003242:	2908      	cmp	r1, #8
 8003244:	d00d      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x3e>
 8003246:	2908      	cmp	r1, #8
 8003248:	f200 8094 	bhi.w	8003374 <HAL_RCC_GetSysClockFreq+0x150>
 800324c:	2900      	cmp	r1, #0
 800324e:	d002      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x32>
 8003250:	2904      	cmp	r1, #4
 8003252:	d003      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x38>
 8003254:	e08e      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003256:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCC_GetSysClockFreq+0x164>)
 8003258:	60bb      	str	r3, [r7, #8]
       break;
 800325a:	e08e      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325c:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_RCC_GetSysClockFreq+0x168>)
 800325e:	60bb      	str	r3, [r7, #8]
      break;
 8003260:	e08b      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003262:	4948      	ldr	r1, [pc, #288]	; (8003384 <HAL_RCC_GetSysClockFreq+0x160>)
 8003264:	6849      	ldr	r1, [r1, #4]
 8003266:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800326a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326c:	4945      	ldr	r1, [pc, #276]	; (8003384 <HAL_RCC_GetSysClockFreq+0x160>)
 800326e:	6849      	ldr	r1, [r1, #4]
 8003270:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003274:	2900      	cmp	r1, #0
 8003276:	d024      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003278:	4942      	ldr	r1, [pc, #264]	; (8003384 <HAL_RCC_GetSysClockFreq+0x160>)
 800327a:	6849      	ldr	r1, [r1, #4]
 800327c:	0989      	lsrs	r1, r1, #6
 800327e:	4608      	mov	r0, r1
 8003280:	f04f 0100 	mov.w	r1, #0
 8003284:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003288:	f04f 0500 	mov.w	r5, #0
 800328c:	ea00 0204 	and.w	r2, r0, r4
 8003290:	ea01 0305 	and.w	r3, r1, r5
 8003294:	493d      	ldr	r1, [pc, #244]	; (800338c <HAL_RCC_GetSysClockFreq+0x168>)
 8003296:	fb01 f003 	mul.w	r0, r1, r3
 800329a:	2100      	movs	r1, #0
 800329c:	fb01 f102 	mul.w	r1, r1, r2
 80032a0:	1844      	adds	r4, r0, r1
 80032a2:	493a      	ldr	r1, [pc, #232]	; (800338c <HAL_RCC_GetSysClockFreq+0x168>)
 80032a4:	fba2 0101 	umull	r0, r1, r2, r1
 80032a8:	1863      	adds	r3, r4, r1
 80032aa:	4619      	mov	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f7fd f82c 	bl	8000310 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e04a      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCC_GetSysClockFreq+0x160>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	461a      	mov	r2, r3
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	ea02 0400 	and.w	r4, r2, r0
 80032da:	ea03 0501 	and.w	r5, r3, r1
 80032de:	4620      	mov	r0, r4
 80032e0:	4629      	mov	r1, r5
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	014b      	lsls	r3, r1, #5
 80032ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032f0:	0142      	lsls	r2, r0, #5
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	1b00      	subs	r0, r0, r4
 80032f8:	eb61 0105 	sbc.w	r1, r1, r5
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	018b      	lsls	r3, r1, #6
 8003306:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800330a:	0182      	lsls	r2, r0, #6
 800330c:	1a12      	subs	r2, r2, r0
 800330e:	eb63 0301 	sbc.w	r3, r3, r1
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	00d9      	lsls	r1, r3, #3
 800331c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003320:	00d0      	lsls	r0, r2, #3
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	1912      	adds	r2, r2, r4
 8003328:	eb45 0303 	adc.w	r3, r5, r3
 800332c:	f04f 0000 	mov.w	r0, #0
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	0299      	lsls	r1, r3, #10
 8003336:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800333a:	0290      	lsls	r0, r2, #10
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	461a      	mov	r2, r3
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	f7fc ffe0 	bl	8000310 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_RCC_GetSysClockFreq+0x160>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	60bb      	str	r3, [r7, #8]
      break;
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_GetSysClockFreq+0x164>)
 8003376:	60bb      	str	r3, [r7, #8]
      break;
 8003378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337a:	68bb      	ldr	r3, [r7, #8]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bdb0      	pop	{r4, r5, r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	017d7840 	.word	0x017d7840

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a9b      	lsrs	r3, r3, #10
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4903      	ldr	r1, [pc, #12]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40023800 	.word	0x40023800
 80033cc:	08006958 	.word	0x08006958

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033d4:	f7ff ffdc 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0b5b      	lsrs	r3, r3, #13
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08006958 	.word	0x08006958

080033f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e041      	b.n	800348e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd ffca 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f000 fc66 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e046      	b.n	800353e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a23      	ldr	r2, [pc, #140]	; (800354c <HAL_TIM_Base_Start+0xb4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d022      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d01d      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_TIM_Base_Start+0xb8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d018      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_TIM_Base_Start+0xbc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_TIM_Base_Start+0xc0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00e      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_TIM_Base_Start+0xc4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_TIM_Base_Start+0xc8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_TIM_Base_Start+0x70>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_TIM_Base_Start+0xcc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b06      	cmp	r3, #6
 8003518:	d010      	beq.n	800353c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	e007      	b.n	800353c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	40014000 	.word	0x40014000
 8003564:	40001800 	.word	0x40001800

08003568 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f839 	bl	8003606 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 fbae 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e041      	b.n	80036b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f839 	bl	80036b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f000 fb55 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_TIM_PWM_Start+0x24>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e022      	b.n	8003736 <HAL_TIM_PWM_Start+0x6a>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d109      	bne.n	800370a <HAL_TIM_PWM_Start+0x3e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e015      	b.n	8003736 <HAL_TIM_PWM_Start+0x6a>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x58>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e008      	b.n	8003736 <HAL_TIM_PWM_Start+0x6a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07c      	b.n	8003838 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Start+0x82>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800374c:	e013      	b.n	8003776 <HAL_TIM_PWM_Start+0xaa>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d104      	bne.n	800375e <HAL_TIM_PWM_Start+0x92>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	e00b      	b.n	8003776 <HAL_TIM_PWM_Start+0xaa>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0xa2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	e003      	b.n	8003776 <HAL_TIM_PWM_Start+0xaa>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fdac 	bl	80042dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <HAL_TIM_PWM_Start+0x174>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_PWM_Start+0xcc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <HAL_TIM_PWM_Start+0x178>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_TIM_PWM_Start+0xd0>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_TIM_PWM_Start+0xd2>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a22      	ldr	r2, [pc, #136]	; (8003840 <HAL_TIM_PWM_Start+0x174>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d01d      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_TIM_PWM_Start+0x17c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d018      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_TIM_PWM_Start+0x180>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_TIM_PWM_Start+0x184>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_TIM_PWM_Start+0x178>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIM_PWM_Start+0x188>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_TIM_PWM_Start+0x136>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIM_PWM_Start+0x18c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d111      	bne.n	8003826 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b06      	cmp	r3, #6
 8003812:	d010      	beq.n	8003836 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003824:	e007      	b.n	8003836 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40010000 	.word	0x40010000
 8003844:	40010400 	.word	0x40010400
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014000 	.word	0x40014000
 8003858:	40001800 	.word	0x40001800

0800385c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2200      	movs	r2, #0
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fd34 	bl	80042dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <HAL_TIM_PWM_Stop+0xd8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_TIM_PWM_Stop+0x2c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <HAL_TIM_PWM_Stop+0xdc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_TIM_PWM_Stop+0x30>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_TIM_PWM_Stop+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d017      	beq.n	80038c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	f241 1311 	movw	r3, #4369	; 0x1111
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <HAL_TIM_PWM_Stop+0x66>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1a      	ldr	r2, [r3, #32]
 80038a8:	f240 4344 	movw	r3, #1092	; 0x444
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_TIM_PWM_Stop+0x66>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_TIM_PWM_Stop+0x96>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1a      	ldr	r2, [r3, #32]
 80038d8:	f240 4344 	movw	r3, #1092	; 0x444
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_PWM_Stop+0x96>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Stop+0xa6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003900:	e013      	b.n	800392a <HAL_TIM_PWM_Stop+0xce>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Stop+0xb6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003910:	e00b      	b.n	800392a <HAL_TIM_PWM_Stop+0xce>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d104      	bne.n	8003922 <HAL_TIM_PWM_Stop+0xc6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003920:	e003      	b.n	800392a <HAL_TIM_PWM_Stop+0xce>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40010000 	.word	0x40010000
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003956:	2302      	movs	r3, #2
 8003958:	e048      	b.n	80039ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d839      	bhi.n	80039dc <HAL_TIM_OC_ConfigChannel+0xa0>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <HAL_TIM_OC_ConfigChannel+0x34>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	080039a5 	.word	0x080039a5
 8003974:	080039dd 	.word	0x080039dd
 8003978:	080039dd 	.word	0x080039dd
 800397c:	080039dd 	.word	0x080039dd
 8003980:	080039b3 	.word	0x080039b3
 8003984:	080039dd 	.word	0x080039dd
 8003988:	080039dd 	.word	0x080039dd
 800398c:	080039dd 	.word	0x080039dd
 8003990:	080039c1 	.word	0x080039c1
 8003994:	080039dd 	.word	0x080039dd
 8003998:	080039dd 	.word	0x080039dd
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	080039cf 	.word	0x080039cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fa4c 	bl	8003e48 <TIM_OC1_SetConfig>
      break;
 80039b0:	e017      	b.n	80039e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fab5 	bl	8003f28 <TIM_OC2_SetConfig>
      break;
 80039be:	e010      	b.n	80039e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb24 	bl	8004014 <TIM_OC3_SetConfig>
      break;
 80039cc:	e009      	b.n	80039e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fb91 	bl	80040fc <TIM_OC4_SetConfig>
      break;
 80039da:	e002      	b.n	80039e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
      break;
 80039e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0ae      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	f200 809f 	bhi.w	8003b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003b61 	.word	0x08003b61
 8003a30:	08003b61 	.word	0x08003b61
 8003a34:	08003b61 	.word	0x08003b61
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003b61 	.word	0x08003b61
 8003a40:	08003b61 	.word	0x08003b61
 8003a44:	08003b61 	.word	0x08003b61
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003b61 	.word	0x08003b61
 8003a50:	08003b61 	.word	0x08003b61
 8003a54:	08003b61 	.word	0x08003b61
 8003a58:	08003b1f 	.word	0x08003b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f9f0 	bl	8003e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0208 	orr.w	r2, r2, #8
 8003a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	619a      	str	r2, [r3, #24]
      break;
 8003a9a:	e064      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa40 	bl	8003f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]
      break;
 8003adc:	e043      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa95 	bl	8004014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69d9      	ldr	r1, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]
      break;
 8003b1c:	e023      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fae9 	bl	80040fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
      break;
 8003b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_ConfigClockSource+0x1c>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e0b4      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x186>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bcc:	d03e      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0xd4>
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd2:	f200 8087 	bhi.w	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	f000 8086 	beq.w	8003cea <HAL_TIM_ConfigClockSource+0x172>
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be2:	d87f      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d01a      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0xa6>
 8003be8:	2b70      	cmp	r3, #112	; 0x70
 8003bea:	d87b      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d050      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x11a>
 8003bf0:	2b60      	cmp	r3, #96	; 0x60
 8003bf2:	d877      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b50      	cmp	r3, #80	; 0x50
 8003bf6:	d03c      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0xfa>
 8003bf8:	2b50      	cmp	r3, #80	; 0x50
 8003bfa:	d873      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d058      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d86f      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d064      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d86b      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d060      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d867      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d05a      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c1c:	e062      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6899      	ldr	r1, [r3, #8]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f000 fb35 	bl	800429c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	609a      	str	r2, [r3, #8]
      break;
 8003c4a:	e04f      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f000 fb1e 	bl	800429c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6e:	609a      	str	r2, [r3, #8]
      break;
 8003c70:	e03c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f000 fa92 	bl	80041a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2150      	movs	r1, #80	; 0x50
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 faeb 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003c90:	e02c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 fab1 	bl	8004206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2160      	movs	r1, #96	; 0x60
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fadb 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e01c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f000 fa72 	bl	80041a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2140      	movs	r1, #64	; 0x40
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 facb 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e00c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 fac2 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003ce2:	e003      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a40      	ldr	r2, [pc, #256]	; (8003e1c <TIM_Base_SetConfig+0x114>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d00f      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <TIM_Base_SetConfig+0x118>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <TIM_Base_SetConfig+0x120>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <TIM_Base_SetConfig+0x114>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d027      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <TIM_Base_SetConfig+0x118>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d023      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <TIM_Base_SetConfig+0x120>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01b      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d017      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	; (8003e30 <TIM_Base_SetConfig+0x128>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <TIM_Base_SetConfig+0x12c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <TIM_Base_SetConfig+0x130>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <TIM_Base_SetConfig+0x134>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a24      	ldr	r2, [pc, #144]	; (8003e40 <TIM_Base_SetConfig+0x138>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <TIM_Base_SetConfig+0x13c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <TIM_Base_SetConfig+0x114>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_Base_SetConfig+0xf8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	615a      	str	r2, [r3, #20]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40010400 	.word	0x40010400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800
 8003e3c:	40001800 	.word	0x40001800
 8003e40:	40001c00 	.word	0x40001c00
 8003e44:	40002000 	.word	0x40002000

08003e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0201 	bic.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <TIM_OC1_SetConfig+0xd8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC1_SetConfig+0x64>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <TIM_OC1_SetConfig+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10c      	bne.n	8003ec6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0308 	bic.w	r3, r3, #8
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <TIM_OC1_SetConfig+0xd8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC1_SetConfig+0x8e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <TIM_OC1_SetConfig+0xdc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d111      	bne.n	8003efa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40010400 	.word	0x40010400

08003f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0210 	bic.w	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0320 	bic.w	r3, r3, #32
 8003f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a22      	ldr	r2, [pc, #136]	; (800400c <TIM_OC2_SetConfig+0xe4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_OC2_SetConfig+0x68>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a21      	ldr	r2, [pc, #132]	; (8004010 <TIM_OC2_SetConfig+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10d      	bne.n	8003fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <TIM_OC2_SetConfig+0xe4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC2_SetConfig+0x94>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <TIM_OC2_SetConfig+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d113      	bne.n	8003fe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40010400 	.word	0x40010400

08004014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <TIM_OC3_SetConfig+0xe0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC3_SetConfig+0x66>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <TIM_OC3_SetConfig+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10d      	bne.n	8004096 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <TIM_OC3_SetConfig+0xe0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_OC3_SetConfig+0x92>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <TIM_OC3_SetConfig+0xe4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d113      	bne.n	80040ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40010400 	.word	0x40010400

080040fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <TIM_OC4_SetConfig+0xa4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC4_SetConfig+0x68>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <TIM_OC4_SetConfig+0xa8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d109      	bne.n	8004178 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	019b      	lsls	r3, r3, #6
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 030a 	bic.w	r3, r3, #10
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b087      	sub	sp, #28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0210 	bic.w	r2, r3, #16
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	031b      	lsls	r3, r3, #12
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	f043 0307 	orr.w	r3, r3, #7
 8004288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	431a      	orrs	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	609a      	str	r2, [r3, #8]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2201      	movs	r2, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800433c:	2302      	movs	r3, #2
 800433e:	e05a      	b.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d01d      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10c      	bne.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40010400 	.word	0x40010400
 8004418:	40014000 	.word	0x40014000
 800441c:	40001800 	.word	0x40001800

08004420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e03f      	b.n	80044b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd f95a 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fe15 	bl	8005094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b08a      	sub	sp, #40	; 0x28
 80044be:	af02      	add	r7, sp, #8
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d17c      	bne.n	80045d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_UART_Transmit+0x2c>
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e075      	b.n	80045d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Transmit+0x3e>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e06e      	b.n	80045d6 <HAL_UART_Transmit+0x11c>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2221      	movs	r2, #33	; 0x21
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450e:	f7fd ffab 	bl	8002468 <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	d108      	bne.n	800453c <HAL_UART_Transmit+0x82>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e003      	b.n	8004544 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800454c:	e02a      	b.n	80045a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fb59 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e036      	b.n	80045d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	3302      	adds	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e007      	b.n	8004596 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3301      	adds	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1cf      	bne.n	800454e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2140      	movs	r1, #64	; 0x40
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb29 	bl	8004c10 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e006      	b.n	80045d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	4613      	mov	r3, r2
 80045ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d130      	bne.n	800465a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Transmit_IT+0x26>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e029      	b.n	800465c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_UART_Transmit_IT+0x38>
 8004612:	2302      	movs	r3, #2
 8004614:	e022      	b.n	800465c <HAL_UART_Transmit_IT+0x7e>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2221      	movs	r2, #33	; 0x21
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004654:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b20      	cmp	r3, #32
 8004680:	d11d      	bne.n	80046be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_UART_Receive_IT+0x26>
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e016      	b.n	80046c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Receive_IT+0x38>
 800469c:	2302      	movs	r3, #2
 800469e:	e00f      	b.n	80046c0 <HAL_UART_Receive_IT+0x58>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fb19 	bl	8004cec <UART_Start_Receive_IT>
 80046ba:	4603      	mov	r3, r0
 80046bc:	e000      	b.n	80046c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
  }
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b0ba      	sub	sp, #232	; 0xe8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_UART_IRQHandler+0x66>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fbf9 	bl	8004f1e <UART_Receive_IT>
      return;
 800472c:	e256      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800472e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80de 	beq.w	80048f4 <HAL_UART_IRQHandler+0x22c>
 8004738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004748:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80d1 	beq.w	80048f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xae>
 800475e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_UART_IRQHandler+0xd2>
 8004782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f043 0202 	orr.w	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <HAL_UART_IRQHandler+0xf6>
 80047a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0204 	orr.w	r2, r3, #4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <HAL_UART_IRQHandler+0x126>
 80047ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0208 	orr.w	r2, r3, #8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 81ed 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_UART_IRQHandler+0x14e>
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fb84 	bl	8004f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <HAL_UART_IRQHandler+0x17a>
 800483a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04f      	beq.n	80048e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa8c 	bl	8004d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d141      	bne.n	80048da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800486c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800488e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800489a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d9      	bne.n	8004856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d013      	beq.n	80048d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	4a7d      	ldr	r2, [pc, #500]	; (8004aa4 <HAL_UART_IRQHandler+0x3dc>)
 80048b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd ff63 	bl	8002782 <HAL_DMA_Abort_IT>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048cc:	4610      	mov	r0, r2
 80048ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00e      	b.n	80048f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f986 	bl	8004be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e00a      	b.n	80048f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f982 	bl	8004be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	e006      	b.n	80048f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f97e 	bl	8004be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048ee:	e170      	b.n	8004bd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	bf00      	nop
    return;
 80048f2:	e16e      	b.n	8004bd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 814a 	bne.w	8004b92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8143 	beq.w	8004b92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 813c 	beq.w	8004b92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	f040 80b4 	bne.w	8004aa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800494c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8140 	beq.w	8004bd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800495a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495e:	429a      	cmp	r2, r3
 8004960:	f080 8139 	bcs.w	8004bd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800496a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004976:	f000 8088 	beq.w	8004a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	330c      	adds	r3, #12
 8004980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e1      	bne.n	80049c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e3      	bne.n	8004a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e3      	bne.n	8004a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd fe0c 	bl	80026a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8ac 	bl	8004bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa0:	e099      	b.n	8004bd6 <HAL_UART_IRQHandler+0x50e>
 8004aa2:	bf00      	nop
 8004aa4:	08004e27 	.word	0x08004e27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 808b 	beq.w	8004bda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8086 	beq.w	8004bda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004af2:	647a      	str	r2, [r7, #68]	; 0x44
 8004af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e3      	bne.n	8004ace <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	623b      	str	r3, [r7, #32]
   return(result);
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3314      	adds	r3, #20
 8004b26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b2a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e3      	bne.n	8004b06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0310 	bic.w	r3, r3, #16
 8004b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b70:	61fa      	str	r2, [r7, #28]
 8004b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e3      	bne.n	8004b4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f834 	bl	8004bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b90:	e023      	b.n	8004bda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x4ea>
 8004b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f94f 	bl	8004e4e <UART_Transmit_IT>
    return;
 8004bb0:	e014      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <HAL_UART_IRQHandler+0x514>
 8004bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f98f 	bl	8004eee <UART_EndTransmit_IT>
    return;
 8004bd0:	e004      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
    return;
 8004bd2:	bf00      	nop
 8004bd4:	e002      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
      return;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
      return;
 8004bda:	bf00      	nop
  }
}
 8004bdc:	37e8      	adds	r7, #232	; 0xe8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop

08004be4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b090      	sub	sp, #64	; 0x40
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c20:	e050      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c28:	d04c      	beq.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c30:	f7fd fc1a 	bl	8002468 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d241      	bcs.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c60:	637a      	str	r2, [r7, #52]	; 0x34
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	613b      	str	r3, [r7, #16]
   return(result);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c94:	623a      	str	r2, [r7, #32]
 8004c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	69f9      	ldr	r1, [r7, #28]
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e5      	bne.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e00f      	b.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d09f      	beq.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3740      	adds	r7, #64	; 0x40
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2222      	movs	r2, #34	; 0x22
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0220 	orr.w	r2, r2, #32
 8004d50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b095      	sub	sp, #84	; 0x54
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d88:	643a      	str	r2, [r7, #64]	; 0x40
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e5      	bne.n	8004d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d119      	bne.n	8004e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f023 0310 	bic.w	r3, r3, #16
 8004dee:	647b      	str	r3, [r7, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df8:	61ba      	str	r2, [r7, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6979      	ldr	r1, [r7, #20]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	613b      	str	r3, [r7, #16]
   return(result);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e1a:	bf00      	nop
 8004e1c:	3754      	adds	r7, #84	; 0x54
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fecf 	bl	8004be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b21      	cmp	r3, #33	; 0x21
 8004e60:	d13e      	bne.n	8004ee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	d114      	bne.n	8004e96 <UART_Transmit_IT+0x48>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d110      	bne.n	8004e96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	621a      	str	r2, [r3, #32]
 8004e94:	e008      	b.n	8004ea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6211      	str	r1, [r2, #32]
 8004ea0:	781a      	ldrb	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10f      	bne.n	8004edc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb fd58 	bl	80009c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b08c      	sub	sp, #48	; 0x30
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b22      	cmp	r3, #34	; 0x22
 8004f30:	f040 80ab 	bne.w	800508a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3c:	d117      	bne.n	8004f6e <UART_Receive_IT+0x50>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d113      	bne.n	8004f6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f6c:	e026      	b.n	8004fbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f80:	d007      	beq.n	8004f92 <UART_Receive_IT+0x74>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <UART_Receive_IT+0x82>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e008      	b.n	8004fb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d15a      	bne.n	8005086 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0220 	bic.w	r2, r2, #32
 8004fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	2b01      	cmp	r3, #1
 800500e:	d135      	bne.n	800507c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	613b      	str	r3, [r7, #16]
   return(result);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f023 0310 	bic.w	r3, r3, #16
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	623a      	str	r2, [r7, #32]
 8005038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	69f9      	ldr	r1, [r7, #28]
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	61bb      	str	r3, [r7, #24]
   return(result);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b10      	cmp	r3, #16
 8005056:	d10a      	bne.n	800506e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fdbf 	bl	8004bf8 <HAL_UARTEx_RxEventCallback>
 800507a:	e002      	b.n	8005082 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fb fcc5 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e002      	b.n	800508c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3730      	adds	r7, #48	; 0x30
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005098:	b09f      	sub	sp, #124	; 0x7c
 800509a:	af00      	add	r7, sp, #0
 800509c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	ea40 0301 	orr.w	r3, r0, r1
 80050b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050d8:	f021 010c 	bic.w	r1, r1, #12
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e2:	430b      	orrs	r3, r1
 80050e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	6999      	ldr	r1, [r3, #24]
 80050f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	ea40 0301 	orr.w	r3, r0, r1
 80050fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4bc5      	ldr	r3, [pc, #788]	; (8005418 <UART_SetConfig+0x384>)
 8005104:	429a      	cmp	r2, r3
 8005106:	d004      	beq.n	8005112 <UART_SetConfig+0x7e>
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4bc3      	ldr	r3, [pc, #780]	; (800541c <UART_SetConfig+0x388>)
 800510e:	429a      	cmp	r2, r3
 8005110:	d103      	bne.n	800511a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005112:	f7fe f95d 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8005116:	6778      	str	r0, [r7, #116]	; 0x74
 8005118:	e002      	b.n	8005120 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800511a:	f7fe f945 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 800511e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	f040 80b6 	bne.w	8005298 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800512c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512e:	461c      	mov	r4, r3
 8005130:	f04f 0500 	mov.w	r5, #0
 8005134:	4622      	mov	r2, r4
 8005136:	462b      	mov	r3, r5
 8005138:	1891      	adds	r1, r2, r2
 800513a:	6439      	str	r1, [r7, #64]	; 0x40
 800513c:	415b      	adcs	r3, r3
 800513e:	647b      	str	r3, [r7, #68]	; 0x44
 8005140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005144:	1912      	adds	r2, r2, r4
 8005146:	eb45 0303 	adc.w	r3, r5, r3
 800514a:	f04f 0000 	mov.w	r0, #0
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	00d9      	lsls	r1, r3, #3
 8005154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005158:	00d0      	lsls	r0, r2, #3
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	1911      	adds	r1, r2, r4
 8005160:	6639      	str	r1, [r7, #96]	; 0x60
 8005162:	416b      	adcs	r3, r5
 8005164:	667b      	str	r3, [r7, #100]	; 0x64
 8005166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	1891      	adds	r1, r2, r2
 8005172:	63b9      	str	r1, [r7, #56]	; 0x38
 8005174:	415b      	adcs	r3, r3
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800517c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005180:	f7fb f8c6 	bl	8000310 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4ba5      	ldr	r3, [pc, #660]	; (8005420 <UART_SetConfig+0x38c>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	011e      	lsls	r6, r3, #4
 8005192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005194:	461c      	mov	r4, r3
 8005196:	f04f 0500 	mov.w	r5, #0
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	1891      	adds	r1, r2, r2
 80051a0:	6339      	str	r1, [r7, #48]	; 0x30
 80051a2:	415b      	adcs	r3, r3
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
 80051a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051aa:	1912      	adds	r2, r2, r4
 80051ac:	eb45 0303 	adc.w	r3, r5, r3
 80051b0:	f04f 0000 	mov.w	r0, #0
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	00d9      	lsls	r1, r3, #3
 80051ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051be:	00d0      	lsls	r0, r2, #3
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	1911      	adds	r1, r2, r4
 80051c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80051c8:	416b      	adcs	r3, r5
 80051ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	1891      	adds	r1, r2, r2
 80051d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80051da:	415b      	adcs	r3, r3
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051e6:	f7fb f893 	bl	8000310 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4b8c      	ldr	r3, [pc, #560]	; (8005420 <UART_SetConfig+0x38c>)
 80051f0:	fba3 1302 	umull	r1, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	2164      	movs	r1, #100	; 0x64
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	3332      	adds	r3, #50	; 0x32
 8005202:	4a87      	ldr	r2, [pc, #540]	; (8005420 <UART_SetConfig+0x38c>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005210:	441e      	add	r6, r3
 8005212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005214:	4618      	mov	r0, r3
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	1894      	adds	r4, r2, r2
 8005220:	623c      	str	r4, [r7, #32]
 8005222:	415b      	adcs	r3, r3
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800522a:	1812      	adds	r2, r2, r0
 800522c:	eb41 0303 	adc.w	r3, r1, r3
 8005230:	f04f 0400 	mov.w	r4, #0
 8005234:	f04f 0500 	mov.w	r5, #0
 8005238:	00dd      	lsls	r5, r3, #3
 800523a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800523e:	00d4      	lsls	r4, r2, #3
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	1814      	adds	r4, r2, r0
 8005246:	653c      	str	r4, [r7, #80]	; 0x50
 8005248:	414b      	adcs	r3, r1
 800524a:	657b      	str	r3, [r7, #84]	; 0x54
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	461a      	mov	r2, r3
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	1891      	adds	r1, r2, r2
 8005258:	61b9      	str	r1, [r7, #24]
 800525a:	415b      	adcs	r3, r3
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005266:	f7fb f853 	bl	8000310 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4b6c      	ldr	r3, [pc, #432]	; (8005420 <UART_SetConfig+0x38c>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a67      	ldr	r2, [pc, #412]	; (8005420 <UART_SetConfig+0x38c>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	f003 0207 	and.w	r2, r3, #7
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4432      	add	r2, r6
 8005294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005296:	e0b9      	b.n	800540c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	461c      	mov	r4, r3
 800529c:	f04f 0500 	mov.w	r5, #0
 80052a0:	4622      	mov	r2, r4
 80052a2:	462b      	mov	r3, r5
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	6139      	str	r1, [r7, #16]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052b0:	1912      	adds	r2, r2, r4
 80052b2:	eb45 0303 	adc.w	r3, r5, r3
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	00d9      	lsls	r1, r3, #3
 80052c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c4:	00d0      	lsls	r0, r2, #3
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	eb12 0804 	adds.w	r8, r2, r4
 80052ce:	eb43 0905 	adc.w	r9, r3, r5
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ea:	0082      	lsls	r2, r0, #2
 80052ec:	4640      	mov	r0, r8
 80052ee:	4649      	mov	r1, r9
 80052f0:	f7fb f80e 	bl	8000310 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b49      	ldr	r3, [pc, #292]	; (8005420 <UART_SetConfig+0x38c>)
 80052fa:	fba3 2302 	umull	r2, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	011e      	lsls	r6, r3, #4
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	4618      	mov	r0, r3
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	1894      	adds	r4, r2, r2
 8005310:	60bc      	str	r4, [r7, #8]
 8005312:	415b      	adcs	r3, r3
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800531a:	1812      	adds	r2, r2, r0
 800531c:	eb41 0303 	adc.w	r3, r1, r3
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	f04f 0500 	mov.w	r5, #0
 8005328:	00dd      	lsls	r5, r3, #3
 800532a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800532e:	00d4      	lsls	r4, r2, #3
 8005330:	4622      	mov	r2, r4
 8005332:	462b      	mov	r3, r5
 8005334:	1814      	adds	r4, r2, r0
 8005336:	64bc      	str	r4, [r7, #72]	; 0x48
 8005338:	414b      	adcs	r3, r1
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	008b      	lsls	r3, r1, #2
 8005350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005354:	0082      	lsls	r2, r0, #2
 8005356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800535a:	f7fa ffd9 	bl	8000310 <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <UART_SetConfig+0x38c>)
 8005364:	fba3 1302 	umull	r1, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	2164      	movs	r1, #100	; 0x64
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	3332      	adds	r3, #50	; 0x32
 8005376:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <UART_SetConfig+0x38c>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005382:	441e      	add	r6, r3
 8005384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005386:	4618      	mov	r0, r3
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	1894      	adds	r4, r2, r2
 8005392:	603c      	str	r4, [r7, #0]
 8005394:	415b      	adcs	r3, r3
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539c:	1812      	adds	r2, r2, r0
 800539e:	eb41 0303 	adc.w	r3, r1, r3
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	f04f 0500 	mov.w	r5, #0
 80053aa:	00dd      	lsls	r5, r3, #3
 80053ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053b0:	00d4      	lsls	r4, r2, #3
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	eb12 0a00 	adds.w	sl, r2, r0
 80053ba:	eb43 0b01 	adc.w	fp, r3, r1
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	008b      	lsls	r3, r1, #2
 80053d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053d6:	0082      	lsls	r2, r0, #2
 80053d8:	4650      	mov	r0, sl
 80053da:	4659      	mov	r1, fp
 80053dc:	f7fa ff98 	bl	8000310 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <UART_SetConfig+0x38c>)
 80053e6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2164      	movs	r1, #100	; 0x64
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	3332      	adds	r3, #50	; 0x32
 80053f8:	4a09      	ldr	r2, [pc, #36]	; (8005420 <UART_SetConfig+0x38c>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4432      	add	r2, r6
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	377c      	adds	r7, #124	; 0x7c
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	40011000 	.word	0x40011000
 800541c:	40011400 	.word	0x40011400
 8005420:	51eb851f 	.word	0x51eb851f

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	; (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	2000000c 	.word	0x2000000c

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4d0d      	ldr	r5, [pc, #52]	; (8005468 <__libc_init_array+0x38>)
 8005434:	4c0d      	ldr	r4, [pc, #52]	; (800546c <__libc_init_array+0x3c>)
 8005436:	1b64      	subs	r4, r4, r5
 8005438:	10a4      	asrs	r4, r4, #2
 800543a:	2600      	movs	r6, #0
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	4d0b      	ldr	r5, [pc, #44]	; (8005470 <__libc_init_array+0x40>)
 8005442:	4c0c      	ldr	r4, [pc, #48]	; (8005474 <__libc_init_array+0x44>)
 8005444:	f001 f9d2 	bl	80067ec <_init>
 8005448:	1b64      	subs	r4, r4, r5
 800544a:	10a4      	asrs	r4, r4, #2
 800544c:	2600      	movs	r6, #0
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08006a8c 	.word	0x08006a8c
 800546c:	08006a8c 	.word	0x08006a8c
 8005470:	08006a8c 	.word	0x08006a8c
 8005474:	08006a90 	.word	0x08006a90

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548e:	4291      	cmp	r1, r2
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <memset>:
 8005494:	4402      	add	r2, r0
 8005496:	4603      	mov	r3, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <iprintf>:
 80054a4:	b40f      	push	{r0, r1, r2, r3}
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <iprintf+0x2c>)
 80054a8:	b513      	push	{r0, r1, r4, lr}
 80054aa:	681c      	ldr	r4, [r3, #0]
 80054ac:	b124      	cbz	r4, 80054b8 <iprintf+0x14>
 80054ae:	69a3      	ldr	r3, [r4, #24]
 80054b0:	b913      	cbnz	r3, 80054b8 <iprintf+0x14>
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fa92 	bl	80059dc <__sinit>
 80054b8:	ab05      	add	r3, sp, #20
 80054ba:	9a04      	ldr	r2, [sp, #16]
 80054bc:	68a1      	ldr	r1, [r4, #8]
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 fdbf 	bl	8006044 <_vfiprintf_r>
 80054c6:	b002      	add	sp, #8
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	b004      	add	sp, #16
 80054ce:	4770      	bx	lr
 80054d0:	2000000c 	.word	0x2000000c

080054d4 <_puts_r>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	460e      	mov	r6, r1
 80054d8:	4605      	mov	r5, r0
 80054da:	b118      	cbz	r0, 80054e4 <_puts_r+0x10>
 80054dc:	6983      	ldr	r3, [r0, #24]
 80054de:	b90b      	cbnz	r3, 80054e4 <_puts_r+0x10>
 80054e0:	f000 fa7c 	bl	80059dc <__sinit>
 80054e4:	69ab      	ldr	r3, [r5, #24]
 80054e6:	68ac      	ldr	r4, [r5, #8]
 80054e8:	b913      	cbnz	r3, 80054f0 <_puts_r+0x1c>
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 fa76 	bl	80059dc <__sinit>
 80054f0:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <_puts_r+0xd0>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	d120      	bne.n	8005538 <_puts_r+0x64>
 80054f6:	686c      	ldr	r4, [r5, #4]
 80054f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054fa:	07db      	lsls	r3, r3, #31
 80054fc:	d405      	bmi.n	800550a <_puts_r+0x36>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	0598      	lsls	r0, r3, #22
 8005502:	d402      	bmi.n	800550a <_puts_r+0x36>
 8005504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005506:	f000 fb07 	bl	8005b18 <__retarget_lock_acquire_recursive>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	0719      	lsls	r1, r3, #28
 800550e:	d51d      	bpl.n	800554c <_puts_r+0x78>
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	b1db      	cbz	r3, 800554c <_puts_r+0x78>
 8005514:	3e01      	subs	r6, #1
 8005516:	68a3      	ldr	r3, [r4, #8]
 8005518:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800551c:	3b01      	subs	r3, #1
 800551e:	60a3      	str	r3, [r4, #8]
 8005520:	bb39      	cbnz	r1, 8005572 <_puts_r+0x9e>
 8005522:	2b00      	cmp	r3, #0
 8005524:	da38      	bge.n	8005598 <_puts_r+0xc4>
 8005526:	4622      	mov	r2, r4
 8005528:	210a      	movs	r1, #10
 800552a:	4628      	mov	r0, r5
 800552c:	f000 f87c 	bl	8005628 <__swbuf_r>
 8005530:	3001      	adds	r0, #1
 8005532:	d011      	beq.n	8005558 <_puts_r+0x84>
 8005534:	250a      	movs	r5, #10
 8005536:	e011      	b.n	800555c <_puts_r+0x88>
 8005538:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <_puts_r+0xd4>)
 800553a:	429c      	cmp	r4, r3
 800553c:	d101      	bne.n	8005542 <_puts_r+0x6e>
 800553e:	68ac      	ldr	r4, [r5, #8]
 8005540:	e7da      	b.n	80054f8 <_puts_r+0x24>
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <_puts_r+0xd8>)
 8005544:	429c      	cmp	r4, r3
 8005546:	bf08      	it	eq
 8005548:	68ec      	ldreq	r4, [r5, #12]
 800554a:	e7d5      	b.n	80054f8 <_puts_r+0x24>
 800554c:	4621      	mov	r1, r4
 800554e:	4628      	mov	r0, r5
 8005550:	f000 f8bc 	bl	80056cc <__swsetup_r>
 8005554:	2800      	cmp	r0, #0
 8005556:	d0dd      	beq.n	8005514 <_puts_r+0x40>
 8005558:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800555c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800555e:	07da      	lsls	r2, r3, #31
 8005560:	d405      	bmi.n	800556e <_puts_r+0x9a>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	059b      	lsls	r3, r3, #22
 8005566:	d402      	bmi.n	800556e <_puts_r+0x9a>
 8005568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556a:	f000 fad6 	bl	8005b1a <__retarget_lock_release_recursive>
 800556e:	4628      	mov	r0, r5
 8005570:	bd70      	pop	{r4, r5, r6, pc}
 8005572:	2b00      	cmp	r3, #0
 8005574:	da04      	bge.n	8005580 <_puts_r+0xac>
 8005576:	69a2      	ldr	r2, [r4, #24]
 8005578:	429a      	cmp	r2, r3
 800557a:	dc06      	bgt.n	800558a <_puts_r+0xb6>
 800557c:	290a      	cmp	r1, #10
 800557e:	d004      	beq.n	800558a <_puts_r+0xb6>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	6022      	str	r2, [r4, #0]
 8005586:	7019      	strb	r1, [r3, #0]
 8005588:	e7c5      	b.n	8005516 <_puts_r+0x42>
 800558a:	4622      	mov	r2, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 f84b 	bl	8005628 <__swbuf_r>
 8005592:	3001      	adds	r0, #1
 8005594:	d1bf      	bne.n	8005516 <_puts_r+0x42>
 8005596:	e7df      	b.n	8005558 <_puts_r+0x84>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	250a      	movs	r5, #10
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	701d      	strb	r5, [r3, #0]
 80055a2:	e7db      	b.n	800555c <_puts_r+0x88>
 80055a4:	08006a10 	.word	0x08006a10
 80055a8:	08006a30 	.word	0x08006a30
 80055ac:	080069f0 	.word	0x080069f0

080055b0 <puts>:
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <puts+0xc>)
 80055b2:	4601      	mov	r1, r0
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	f7ff bf8d 	b.w	80054d4 <_puts_r>
 80055ba:	bf00      	nop
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <sniprintf>:
 80055c0:	b40c      	push	{r2, r3}
 80055c2:	b530      	push	{r4, r5, lr}
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <sniprintf+0x64>)
 80055c6:	1e0c      	subs	r4, r1, #0
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	b09d      	sub	sp, #116	; 0x74
 80055cc:	da08      	bge.n	80055e0 <sniprintf+0x20>
 80055ce:	238b      	movs	r3, #139	; 0x8b
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d6:	b01d      	add	sp, #116	; 0x74
 80055d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055dc:	b002      	add	sp, #8
 80055de:	4770      	bx	lr
 80055e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80055e8:	bf14      	ite	ne
 80055ea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80055ee:	4623      	moveq	r3, r4
 80055f0:	9304      	str	r3, [sp, #16]
 80055f2:	9307      	str	r3, [sp, #28]
 80055f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f8:	9002      	str	r0, [sp, #8]
 80055fa:	9006      	str	r0, [sp, #24]
 80055fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005602:	ab21      	add	r3, sp, #132	; 0x84
 8005604:	a902      	add	r1, sp, #8
 8005606:	4628      	mov	r0, r5
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	f000 fbf1 	bl	8005df0 <_svfiprintf_r>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	bfbc      	itt	lt
 8005612:	238b      	movlt	r3, #139	; 0x8b
 8005614:	602b      	strlt	r3, [r5, #0]
 8005616:	2c00      	cmp	r4, #0
 8005618:	d0dd      	beq.n	80055d6 <sniprintf+0x16>
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e7d9      	b.n	80055d6 <sniprintf+0x16>
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c

08005628 <__swbuf_r>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	460e      	mov	r6, r1
 800562c:	4614      	mov	r4, r2
 800562e:	4605      	mov	r5, r0
 8005630:	b118      	cbz	r0, 800563a <__swbuf_r+0x12>
 8005632:	6983      	ldr	r3, [r0, #24]
 8005634:	b90b      	cbnz	r3, 800563a <__swbuf_r+0x12>
 8005636:	f000 f9d1 	bl	80059dc <__sinit>
 800563a:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <__swbuf_r+0x98>)
 800563c:	429c      	cmp	r4, r3
 800563e:	d12b      	bne.n	8005698 <__swbuf_r+0x70>
 8005640:	686c      	ldr	r4, [r5, #4]
 8005642:	69a3      	ldr	r3, [r4, #24]
 8005644:	60a3      	str	r3, [r4, #8]
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	071a      	lsls	r2, r3, #28
 800564a:	d52f      	bpl.n	80056ac <__swbuf_r+0x84>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	b36b      	cbz	r3, 80056ac <__swbuf_r+0x84>
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	1ac0      	subs	r0, r0, r3
 8005656:	6963      	ldr	r3, [r4, #20]
 8005658:	b2f6      	uxtb	r6, r6
 800565a:	4283      	cmp	r3, r0
 800565c:	4637      	mov	r7, r6
 800565e:	dc04      	bgt.n	800566a <__swbuf_r+0x42>
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f926 	bl	80058b4 <_fflush_r>
 8005668:	bb30      	cbnz	r0, 80056b8 <__swbuf_r+0x90>
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	3b01      	subs	r3, #1
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	701e      	strb	r6, [r3, #0]
 8005678:	6963      	ldr	r3, [r4, #20]
 800567a:	3001      	adds	r0, #1
 800567c:	4283      	cmp	r3, r0
 800567e:	d004      	beq.n	800568a <__swbuf_r+0x62>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	07db      	lsls	r3, r3, #31
 8005684:	d506      	bpl.n	8005694 <__swbuf_r+0x6c>
 8005686:	2e0a      	cmp	r6, #10
 8005688:	d104      	bne.n	8005694 <__swbuf_r+0x6c>
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f000 f911 	bl	80058b4 <_fflush_r>
 8005692:	b988      	cbnz	r0, 80056b8 <__swbuf_r+0x90>
 8005694:	4638      	mov	r0, r7
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <__swbuf_r+0x9c>)
 800569a:	429c      	cmp	r4, r3
 800569c:	d101      	bne.n	80056a2 <__swbuf_r+0x7a>
 800569e:	68ac      	ldr	r4, [r5, #8]
 80056a0:	e7cf      	b.n	8005642 <__swbuf_r+0x1a>
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <__swbuf_r+0xa0>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	bf08      	it	eq
 80056a8:	68ec      	ldreq	r4, [r5, #12]
 80056aa:	e7ca      	b.n	8005642 <__swbuf_r+0x1a>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f80c 	bl	80056cc <__swsetup_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d0cb      	beq.n	8005650 <__swbuf_r+0x28>
 80056b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056bc:	e7ea      	b.n	8005694 <__swbuf_r+0x6c>
 80056be:	bf00      	nop
 80056c0:	08006a10 	.word	0x08006a10
 80056c4:	08006a30 	.word	0x08006a30
 80056c8:	080069f0 	.word	0x080069f0

080056cc <__swsetup_r>:
 80056cc:	4b32      	ldr	r3, [pc, #200]	; (8005798 <__swsetup_r+0xcc>)
 80056ce:	b570      	push	{r4, r5, r6, lr}
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	4606      	mov	r6, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	b125      	cbz	r5, 80056e2 <__swsetup_r+0x16>
 80056d8:	69ab      	ldr	r3, [r5, #24]
 80056da:	b913      	cbnz	r3, 80056e2 <__swsetup_r+0x16>
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f97d 	bl	80059dc <__sinit>
 80056e2:	4b2e      	ldr	r3, [pc, #184]	; (800579c <__swsetup_r+0xd0>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	d10f      	bne.n	8005708 <__swsetup_r+0x3c>
 80056e8:	686c      	ldr	r4, [r5, #4]
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056f0:	0719      	lsls	r1, r3, #28
 80056f2:	d42c      	bmi.n	800574e <__swsetup_r+0x82>
 80056f4:	06dd      	lsls	r5, r3, #27
 80056f6:	d411      	bmi.n	800571c <__swsetup_r+0x50>
 80056f8:	2309      	movs	r3, #9
 80056fa:	6033      	str	r3, [r6, #0]
 80056fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005706:	e03e      	b.n	8005786 <__swsetup_r+0xba>
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <__swsetup_r+0xd4>)
 800570a:	429c      	cmp	r4, r3
 800570c:	d101      	bne.n	8005712 <__swsetup_r+0x46>
 800570e:	68ac      	ldr	r4, [r5, #8]
 8005710:	e7eb      	b.n	80056ea <__swsetup_r+0x1e>
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <__swsetup_r+0xd8>)
 8005714:	429c      	cmp	r4, r3
 8005716:	bf08      	it	eq
 8005718:	68ec      	ldreq	r4, [r5, #12]
 800571a:	e7e6      	b.n	80056ea <__swsetup_r+0x1e>
 800571c:	0758      	lsls	r0, r3, #29
 800571e:	d512      	bpl.n	8005746 <__swsetup_r+0x7a>
 8005720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005722:	b141      	cbz	r1, 8005736 <__swsetup_r+0x6a>
 8005724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005728:	4299      	cmp	r1, r3
 800572a:	d002      	beq.n	8005732 <__swsetup_r+0x66>
 800572c:	4630      	mov	r0, r6
 800572e:	f000 fa59 	bl	8005be4 <_free_r>
 8005732:	2300      	movs	r3, #0
 8005734:	6363      	str	r3, [r4, #52]	; 0x34
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	2300      	movs	r3, #0
 8005740:	6063      	str	r3, [r4, #4]
 8005742:	6923      	ldr	r3, [r4, #16]
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	f043 0308 	orr.w	r3, r3, #8
 800574c:	81a3      	strh	r3, [r4, #12]
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	b94b      	cbnz	r3, 8005766 <__swsetup_r+0x9a>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d003      	beq.n	8005766 <__swsetup_r+0x9a>
 800575e:	4621      	mov	r1, r4
 8005760:	4630      	mov	r0, r6
 8005762:	f000 f9ff 	bl	8005b64 <__smakebuf_r>
 8005766:	89a0      	ldrh	r0, [r4, #12]
 8005768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800576c:	f010 0301 	ands.w	r3, r0, #1
 8005770:	d00a      	beq.n	8005788 <__swsetup_r+0xbc>
 8005772:	2300      	movs	r3, #0
 8005774:	60a3      	str	r3, [r4, #8]
 8005776:	6963      	ldr	r3, [r4, #20]
 8005778:	425b      	negs	r3, r3
 800577a:	61a3      	str	r3, [r4, #24]
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	b943      	cbnz	r3, 8005792 <__swsetup_r+0xc6>
 8005780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005784:	d1ba      	bne.n	80056fc <__swsetup_r+0x30>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	0781      	lsls	r1, r0, #30
 800578a:	bf58      	it	pl
 800578c:	6963      	ldrpl	r3, [r4, #20]
 800578e:	60a3      	str	r3, [r4, #8]
 8005790:	e7f4      	b.n	800577c <__swsetup_r+0xb0>
 8005792:	2000      	movs	r0, #0
 8005794:	e7f7      	b.n	8005786 <__swsetup_r+0xba>
 8005796:	bf00      	nop
 8005798:	2000000c 	.word	0x2000000c
 800579c:	08006a10 	.word	0x08006a10
 80057a0:	08006a30 	.word	0x08006a30
 80057a4:	080069f0 	.word	0x080069f0

080057a8 <__sflush_r>:
 80057a8:	898a      	ldrh	r2, [r1, #12]
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	4605      	mov	r5, r0
 80057b0:	0710      	lsls	r0, r2, #28
 80057b2:	460c      	mov	r4, r1
 80057b4:	d458      	bmi.n	8005868 <__sflush_r+0xc0>
 80057b6:	684b      	ldr	r3, [r1, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc05      	bgt.n	80057c8 <__sflush_r+0x20>
 80057bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dc02      	bgt.n	80057c8 <__sflush_r+0x20>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	d0f9      	beq.n	80057c2 <__sflush_r+0x1a>
 80057ce:	2300      	movs	r3, #0
 80057d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057d4:	682f      	ldr	r7, [r5, #0]
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	d032      	beq.n	8005840 <__sflush_r+0x98>
 80057da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	075a      	lsls	r2, r3, #29
 80057e0:	d505      	bpl.n	80057ee <__sflush_r+0x46>
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	1ac0      	subs	r0, r0, r3
 80057e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e8:	b10b      	cbz	r3, 80057ee <__sflush_r+0x46>
 80057ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ec:	1ac0      	subs	r0, r0, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	4602      	mov	r2, r0
 80057f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f4:	6a21      	ldr	r1, [r4, #32]
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b0      	blx	r6
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	d106      	bne.n	800580e <__sflush_r+0x66>
 8005800:	6829      	ldr	r1, [r5, #0]
 8005802:	291d      	cmp	r1, #29
 8005804:	d82c      	bhi.n	8005860 <__sflush_r+0xb8>
 8005806:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <__sflush_r+0x108>)
 8005808:	40ca      	lsrs	r2, r1
 800580a:	07d6      	lsls	r6, r2, #31
 800580c:	d528      	bpl.n	8005860 <__sflush_r+0xb8>
 800580e:	2200      	movs	r2, #0
 8005810:	6062      	str	r2, [r4, #4]
 8005812:	04d9      	lsls	r1, r3, #19
 8005814:	6922      	ldr	r2, [r4, #16]
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	d504      	bpl.n	8005824 <__sflush_r+0x7c>
 800581a:	1c42      	adds	r2, r0, #1
 800581c:	d101      	bne.n	8005822 <__sflush_r+0x7a>
 800581e:	682b      	ldr	r3, [r5, #0]
 8005820:	b903      	cbnz	r3, 8005824 <__sflush_r+0x7c>
 8005822:	6560      	str	r0, [r4, #84]	; 0x54
 8005824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005826:	602f      	str	r7, [r5, #0]
 8005828:	2900      	cmp	r1, #0
 800582a:	d0ca      	beq.n	80057c2 <__sflush_r+0x1a>
 800582c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005830:	4299      	cmp	r1, r3
 8005832:	d002      	beq.n	800583a <__sflush_r+0x92>
 8005834:	4628      	mov	r0, r5
 8005836:	f000 f9d5 	bl	8005be4 <_free_r>
 800583a:	2000      	movs	r0, #0
 800583c:	6360      	str	r0, [r4, #52]	; 0x34
 800583e:	e7c1      	b.n	80057c4 <__sflush_r+0x1c>
 8005840:	6a21      	ldr	r1, [r4, #32]
 8005842:	2301      	movs	r3, #1
 8005844:	4628      	mov	r0, r5
 8005846:	47b0      	blx	r6
 8005848:	1c41      	adds	r1, r0, #1
 800584a:	d1c7      	bne.n	80057dc <__sflush_r+0x34>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0c4      	beq.n	80057dc <__sflush_r+0x34>
 8005852:	2b1d      	cmp	r3, #29
 8005854:	d001      	beq.n	800585a <__sflush_r+0xb2>
 8005856:	2b16      	cmp	r3, #22
 8005858:	d101      	bne.n	800585e <__sflush_r+0xb6>
 800585a:	602f      	str	r7, [r5, #0]
 800585c:	e7b1      	b.n	80057c2 <__sflush_r+0x1a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	e7ad      	b.n	80057c4 <__sflush_r+0x1c>
 8005868:	690f      	ldr	r7, [r1, #16]
 800586a:	2f00      	cmp	r7, #0
 800586c:	d0a9      	beq.n	80057c2 <__sflush_r+0x1a>
 800586e:	0793      	lsls	r3, r2, #30
 8005870:	680e      	ldr	r6, [r1, #0]
 8005872:	bf08      	it	eq
 8005874:	694b      	ldreq	r3, [r1, #20]
 8005876:	600f      	str	r7, [r1, #0]
 8005878:	bf18      	it	ne
 800587a:	2300      	movne	r3, #0
 800587c:	eba6 0807 	sub.w	r8, r6, r7
 8005880:	608b      	str	r3, [r1, #8]
 8005882:	f1b8 0f00 	cmp.w	r8, #0
 8005886:	dd9c      	ble.n	80057c2 <__sflush_r+0x1a>
 8005888:	6a21      	ldr	r1, [r4, #32]
 800588a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800588c:	4643      	mov	r3, r8
 800588e:	463a      	mov	r2, r7
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	2800      	cmp	r0, #0
 8005896:	dc06      	bgt.n	80058a6 <__sflush_r+0xfe>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a4:	e78e      	b.n	80057c4 <__sflush_r+0x1c>
 80058a6:	4407      	add	r7, r0
 80058a8:	eba8 0800 	sub.w	r8, r8, r0
 80058ac:	e7e9      	b.n	8005882 <__sflush_r+0xda>
 80058ae:	bf00      	nop
 80058b0:	20400001 	.word	0x20400001

080058b4 <_fflush_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	b913      	cbnz	r3, 80058c4 <_fflush_r+0x10>
 80058be:	2500      	movs	r5, #0
 80058c0:	4628      	mov	r0, r5
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	b118      	cbz	r0, 80058ce <_fflush_r+0x1a>
 80058c6:	6983      	ldr	r3, [r0, #24]
 80058c8:	b90b      	cbnz	r3, 80058ce <_fflush_r+0x1a>
 80058ca:	f000 f887 	bl	80059dc <__sinit>
 80058ce:	4b14      	ldr	r3, [pc, #80]	; (8005920 <_fflush_r+0x6c>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	d11b      	bne.n	800590c <_fflush_r+0x58>
 80058d4:	686c      	ldr	r4, [r5, #4]
 80058d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <_fflush_r+0xa>
 80058de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058e0:	07d0      	lsls	r0, r2, #31
 80058e2:	d404      	bmi.n	80058ee <_fflush_r+0x3a>
 80058e4:	0599      	lsls	r1, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_fflush_r+0x3a>
 80058e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ea:	f000 f915 	bl	8005b18 <__retarget_lock_acquire_recursive>
 80058ee:	4628      	mov	r0, r5
 80058f0:	4621      	mov	r1, r4
 80058f2:	f7ff ff59 	bl	80057a8 <__sflush_r>
 80058f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058f8:	07da      	lsls	r2, r3, #31
 80058fa:	4605      	mov	r5, r0
 80058fc:	d4e0      	bmi.n	80058c0 <_fflush_r+0xc>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	059b      	lsls	r3, r3, #22
 8005902:	d4dd      	bmi.n	80058c0 <_fflush_r+0xc>
 8005904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005906:	f000 f908 	bl	8005b1a <__retarget_lock_release_recursive>
 800590a:	e7d9      	b.n	80058c0 <_fflush_r+0xc>
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <_fflush_r+0x70>)
 800590e:	429c      	cmp	r4, r3
 8005910:	d101      	bne.n	8005916 <_fflush_r+0x62>
 8005912:	68ac      	ldr	r4, [r5, #8]
 8005914:	e7df      	b.n	80058d6 <_fflush_r+0x22>
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <_fflush_r+0x74>)
 8005918:	429c      	cmp	r4, r3
 800591a:	bf08      	it	eq
 800591c:	68ec      	ldreq	r4, [r5, #12]
 800591e:	e7da      	b.n	80058d6 <_fflush_r+0x22>
 8005920:	08006a10 	.word	0x08006a10
 8005924:	08006a30 	.word	0x08006a30
 8005928:	080069f0 	.word	0x080069f0

0800592c <std>:
 800592c:	2300      	movs	r3, #0
 800592e:	b510      	push	{r4, lr}
 8005930:	4604      	mov	r4, r0
 8005932:	e9c0 3300 	strd	r3, r3, [r0]
 8005936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800593a:	6083      	str	r3, [r0, #8]
 800593c:	8181      	strh	r1, [r0, #12]
 800593e:	6643      	str	r3, [r0, #100]	; 0x64
 8005940:	81c2      	strh	r2, [r0, #14]
 8005942:	6183      	str	r3, [r0, #24]
 8005944:	4619      	mov	r1, r3
 8005946:	2208      	movs	r2, #8
 8005948:	305c      	adds	r0, #92	; 0x5c
 800594a:	f7ff fda3 	bl	8005494 <memset>
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <std+0x38>)
 8005950:	6263      	str	r3, [r4, #36]	; 0x24
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <std+0x3c>)
 8005954:	62a3      	str	r3, [r4, #40]	; 0x28
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <std+0x40>)
 8005958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <std+0x44>)
 800595c:	6224      	str	r4, [r4, #32]
 800595e:	6323      	str	r3, [r4, #48]	; 0x30
 8005960:	bd10      	pop	{r4, pc}
 8005962:	bf00      	nop
 8005964:	080065ed 	.word	0x080065ed
 8005968:	0800660f 	.word	0x0800660f
 800596c:	08006647 	.word	0x08006647
 8005970:	0800666b 	.word	0x0800666b

08005974 <_cleanup_r>:
 8005974:	4901      	ldr	r1, [pc, #4]	; (800597c <_cleanup_r+0x8>)
 8005976:	f000 b8af 	b.w	8005ad8 <_fwalk_reent>
 800597a:	bf00      	nop
 800597c:	080058b5 	.word	0x080058b5

08005980 <__sfmoreglue>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	1e4a      	subs	r2, r1, #1
 8005984:	2568      	movs	r5, #104	; 0x68
 8005986:	4355      	muls	r5, r2
 8005988:	460e      	mov	r6, r1
 800598a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800598e:	f000 f979 	bl	8005c84 <_malloc_r>
 8005992:	4604      	mov	r4, r0
 8005994:	b140      	cbz	r0, 80059a8 <__sfmoreglue+0x28>
 8005996:	2100      	movs	r1, #0
 8005998:	e9c0 1600 	strd	r1, r6, [r0]
 800599c:	300c      	adds	r0, #12
 800599e:	60a0      	str	r0, [r4, #8]
 80059a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059a4:	f7ff fd76 	bl	8005494 <memset>
 80059a8:	4620      	mov	r0, r4
 80059aa:	bd70      	pop	{r4, r5, r6, pc}

080059ac <__sfp_lock_acquire>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__sfp_lock_acquire+0x8>)
 80059ae:	f000 b8b3 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 80059b2:	bf00      	nop
 80059b4:	20000804 	.word	0x20000804

080059b8 <__sfp_lock_release>:
 80059b8:	4801      	ldr	r0, [pc, #4]	; (80059c0 <__sfp_lock_release+0x8>)
 80059ba:	f000 b8ae 	b.w	8005b1a <__retarget_lock_release_recursive>
 80059be:	bf00      	nop
 80059c0:	20000804 	.word	0x20000804

080059c4 <__sinit_lock_acquire>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__sinit_lock_acquire+0x8>)
 80059c6:	f000 b8a7 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	200007ff 	.word	0x200007ff

080059d0 <__sinit_lock_release>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sinit_lock_release+0x8>)
 80059d2:	f000 b8a2 	b.w	8005b1a <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	200007ff 	.word	0x200007ff

080059dc <__sinit>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	f7ff fff0 	bl	80059c4 <__sinit_lock_acquire>
 80059e4:	69a3      	ldr	r3, [r4, #24]
 80059e6:	b11b      	cbz	r3, 80059f0 <__sinit+0x14>
 80059e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ec:	f7ff bff0 	b.w	80059d0 <__sinit_lock_release>
 80059f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059f4:	6523      	str	r3, [r4, #80]	; 0x50
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <__sinit+0x68>)
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <__sinit+0x6c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	bf04      	itt	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	61a3      	streq	r3, [r4, #24]
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 f820 	bl	8005a4c <__sfp>
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 f81c 	bl	8005a4c <__sfp>
 8005a14:	60a0      	str	r0, [r4, #8]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f818 	bl	8005a4c <__sfp>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60e0      	str	r0, [r4, #12]
 8005a20:	2104      	movs	r1, #4
 8005a22:	6860      	ldr	r0, [r4, #4]
 8005a24:	f7ff ff82 	bl	800592c <std>
 8005a28:	68a0      	ldr	r0, [r4, #8]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2109      	movs	r1, #9
 8005a2e:	f7ff ff7d 	bl	800592c <std>
 8005a32:	68e0      	ldr	r0, [r4, #12]
 8005a34:	2202      	movs	r2, #2
 8005a36:	2112      	movs	r1, #18
 8005a38:	f7ff ff78 	bl	800592c <std>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61a3      	str	r3, [r4, #24]
 8005a40:	e7d2      	b.n	80059e8 <__sinit+0xc>
 8005a42:	bf00      	nop
 8005a44:	080069ec 	.word	0x080069ec
 8005a48:	08005975 	.word	0x08005975

08005a4c <__sfp>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	4607      	mov	r7, r0
 8005a50:	f7ff ffac 	bl	80059ac <__sfp_lock_acquire>
 8005a54:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <__sfp+0x84>)
 8005a56:	681e      	ldr	r6, [r3, #0]
 8005a58:	69b3      	ldr	r3, [r6, #24]
 8005a5a:	b913      	cbnz	r3, 8005a62 <__sfp+0x16>
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7ff ffbd 	bl	80059dc <__sinit>
 8005a62:	3648      	adds	r6, #72	; 0x48
 8005a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	d503      	bpl.n	8005a74 <__sfp+0x28>
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	b30b      	cbz	r3, 8005ab4 <__sfp+0x68>
 8005a70:	6836      	ldr	r6, [r6, #0]
 8005a72:	e7f7      	b.n	8005a64 <__sfp+0x18>
 8005a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a78:	b9d5      	cbnz	r5, 8005ab0 <__sfp+0x64>
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <__sfp+0x88>)
 8005a7c:	60e3      	str	r3, [r4, #12]
 8005a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a82:	6665      	str	r5, [r4, #100]	; 0x64
 8005a84:	f000 f847 	bl	8005b16 <__retarget_lock_init_recursive>
 8005a88:	f7ff ff96 	bl	80059b8 <__sfp_lock_release>
 8005a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a94:	6025      	str	r5, [r4, #0]
 8005a96:	61a5      	str	r5, [r4, #24]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005aa0:	f7ff fcf8 	bl	8005494 <memset>
 8005aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005aac:	4620      	mov	r0, r4
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	3468      	adds	r4, #104	; 0x68
 8005ab2:	e7d9      	b.n	8005a68 <__sfp+0x1c>
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f7ff ff62 	bl	8005980 <__sfmoreglue>
 8005abc:	4604      	mov	r4, r0
 8005abe:	6030      	str	r0, [r6, #0]
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d1d5      	bne.n	8005a70 <__sfp+0x24>
 8005ac4:	f7ff ff78 	bl	80059b8 <__sfp_lock_release>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	e7ee      	b.n	8005aac <__sfp+0x60>
 8005ace:	bf00      	nop
 8005ad0:	080069ec 	.word	0x080069ec
 8005ad4:	ffff0001 	.word	0xffff0001

08005ad8 <_fwalk_reent>:
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4606      	mov	r6, r0
 8005ade:	4688      	mov	r8, r1
 8005ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ae4:	2700      	movs	r7, #0
 8005ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aea:	f1b9 0901 	subs.w	r9, r9, #1
 8005aee:	d505      	bpl.n	8005afc <_fwalk_reent+0x24>
 8005af0:	6824      	ldr	r4, [r4, #0]
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	d1f7      	bne.n	8005ae6 <_fwalk_reent+0xe>
 8005af6:	4638      	mov	r0, r7
 8005af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afc:	89ab      	ldrh	r3, [r5, #12]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d907      	bls.n	8005b12 <_fwalk_reent+0x3a>
 8005b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b06:	3301      	adds	r3, #1
 8005b08:	d003      	beq.n	8005b12 <_fwalk_reent+0x3a>
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	47c0      	blx	r8
 8005b10:	4307      	orrs	r7, r0
 8005b12:	3568      	adds	r5, #104	; 0x68
 8005b14:	e7e9      	b.n	8005aea <_fwalk_reent+0x12>

08005b16 <__retarget_lock_init_recursive>:
 8005b16:	4770      	bx	lr

08005b18 <__retarget_lock_acquire_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_release_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__swhatbuf_r>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	460e      	mov	r6, r1
 8005b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	b096      	sub	sp, #88	; 0x58
 8005b28:	4614      	mov	r4, r2
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	da07      	bge.n	8005b3e <__swhatbuf_r+0x22>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	89b3      	ldrh	r3, [r6, #12]
 8005b34:	061a      	lsls	r2, r3, #24
 8005b36:	d410      	bmi.n	8005b5a <__swhatbuf_r+0x3e>
 8005b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3c:	e00e      	b.n	8005b5c <__swhatbuf_r+0x40>
 8005b3e:	466a      	mov	r2, sp
 8005b40:	f000 fdba 	bl	80066b8 <_fstat_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	dbf2      	blt.n	8005b2e <__swhatbuf_r+0x12>
 8005b48:	9a01      	ldr	r2, [sp, #4]
 8005b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b52:	425a      	negs	r2, r3
 8005b54:	415a      	adcs	r2, r3
 8005b56:	602a      	str	r2, [r5, #0]
 8005b58:	e7ee      	b.n	8005b38 <__swhatbuf_r+0x1c>
 8005b5a:	2340      	movs	r3, #64	; 0x40
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	b016      	add	sp, #88	; 0x58
 8005b62:	bd70      	pop	{r4, r5, r6, pc}

08005b64 <__smakebuf_r>:
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b68:	079d      	lsls	r5, r3, #30
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	d507      	bpl.n	8005b80 <__smakebuf_r+0x1c>
 8005b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6163      	str	r3, [r4, #20]
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	ab01      	add	r3, sp, #4
 8005b82:	466a      	mov	r2, sp
 8005b84:	f7ff ffca 	bl	8005b1c <__swhatbuf_r>
 8005b88:	9900      	ldr	r1, [sp, #0]
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f000 f879 	bl	8005c84 <_malloc_r>
 8005b92:	b948      	cbnz	r0, 8005ba8 <__smakebuf_r+0x44>
 8005b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b98:	059a      	lsls	r2, r3, #22
 8005b9a:	d4ef      	bmi.n	8005b7c <__smakebuf_r+0x18>
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	e7e3      	b.n	8005b70 <__smakebuf_r+0xc>
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <__smakebuf_r+0x7c>)
 8005baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	6020      	str	r0, [r4, #0]
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	6163      	str	r3, [r4, #20]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	6120      	str	r0, [r4, #16]
 8005bbe:	b15b      	cbz	r3, 8005bd8 <__smakebuf_r+0x74>
 8005bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 fd89 	bl	80066dc <_isatty_r>
 8005bca:	b128      	cbz	r0, 8005bd8 <__smakebuf_r+0x74>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	89a0      	ldrh	r0, [r4, #12]
 8005bda:	4305      	orrs	r5, r0
 8005bdc:	81a5      	strh	r5, [r4, #12]
 8005bde:	e7cd      	b.n	8005b7c <__smakebuf_r+0x18>
 8005be0:	08005975 	.word	0x08005975

08005be4 <_free_r>:
 8005be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005be6:	2900      	cmp	r1, #0
 8005be8:	d048      	beq.n	8005c7c <_free_r+0x98>
 8005bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bee:	9001      	str	r0, [sp, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bf6:	bfb8      	it	lt
 8005bf8:	18e4      	addlt	r4, r4, r3
 8005bfa:	f000 fdab 	bl	8006754 <__malloc_lock>
 8005bfe:	4a20      	ldr	r2, [pc, #128]	; (8005c80 <_free_r+0x9c>)
 8005c00:	9801      	ldr	r0, [sp, #4]
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	4615      	mov	r5, r2
 8005c06:	b933      	cbnz	r3, 8005c16 <_free_r+0x32>
 8005c08:	6063      	str	r3, [r4, #4]
 8005c0a:	6014      	str	r4, [r2, #0]
 8005c0c:	b003      	add	sp, #12
 8005c0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c12:	f000 bda5 	b.w	8006760 <__malloc_unlock>
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	d90b      	bls.n	8005c32 <_free_r+0x4e>
 8005c1a:	6821      	ldr	r1, [r4, #0]
 8005c1c:	1862      	adds	r2, r4, r1
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bf04      	itt	eq
 8005c22:	681a      	ldreq	r2, [r3, #0]
 8005c24:	685b      	ldreq	r3, [r3, #4]
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	bf04      	itt	eq
 8005c2a:	1852      	addeq	r2, r2, r1
 8005c2c:	6022      	streq	r2, [r4, #0]
 8005c2e:	602c      	str	r4, [r5, #0]
 8005c30:	e7ec      	b.n	8005c0c <_free_r+0x28>
 8005c32:	461a      	mov	r2, r3
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b10b      	cbz	r3, 8005c3c <_free_r+0x58>
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	d9fa      	bls.n	8005c32 <_free_r+0x4e>
 8005c3c:	6811      	ldr	r1, [r2, #0]
 8005c3e:	1855      	adds	r5, r2, r1
 8005c40:	42a5      	cmp	r5, r4
 8005c42:	d10b      	bne.n	8005c5c <_free_r+0x78>
 8005c44:	6824      	ldr	r4, [r4, #0]
 8005c46:	4421      	add	r1, r4
 8005c48:	1854      	adds	r4, r2, r1
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	d1dd      	bne.n	8005c0c <_free_r+0x28>
 8005c50:	681c      	ldr	r4, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	6053      	str	r3, [r2, #4]
 8005c56:	4421      	add	r1, r4
 8005c58:	6011      	str	r1, [r2, #0]
 8005c5a:	e7d7      	b.n	8005c0c <_free_r+0x28>
 8005c5c:	d902      	bls.n	8005c64 <_free_r+0x80>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	6003      	str	r3, [r0, #0]
 8005c62:	e7d3      	b.n	8005c0c <_free_r+0x28>
 8005c64:	6825      	ldr	r5, [r4, #0]
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf04      	itt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	6063      	str	r3, [r4, #4]
 8005c72:	bf04      	itt	eq
 8005c74:	1949      	addeq	r1, r1, r5
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	6054      	str	r4, [r2, #4]
 8005c7a:	e7c7      	b.n	8005c0c <_free_r+0x28>
 8005c7c:	b003      	add	sp, #12
 8005c7e:	bd30      	pop	{r4, r5, pc}
 8005c80:	200000a8 	.word	0x200000a8

08005c84 <_malloc_r>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	1ccd      	adds	r5, r1, #3
 8005c88:	f025 0503 	bic.w	r5, r5, #3
 8005c8c:	3508      	adds	r5, #8
 8005c8e:	2d0c      	cmp	r5, #12
 8005c90:	bf38      	it	cc
 8005c92:	250c      	movcc	r5, #12
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	4606      	mov	r6, r0
 8005c98:	db01      	blt.n	8005c9e <_malloc_r+0x1a>
 8005c9a:	42a9      	cmp	r1, r5
 8005c9c:	d903      	bls.n	8005ca6 <_malloc_r+0x22>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca6:	f000 fd55 	bl	8006754 <__malloc_lock>
 8005caa:	4921      	ldr	r1, [pc, #132]	; (8005d30 <_malloc_r+0xac>)
 8005cac:	680a      	ldr	r2, [r1, #0]
 8005cae:	4614      	mov	r4, r2
 8005cb0:	b99c      	cbnz	r4, 8005cda <_malloc_r+0x56>
 8005cb2:	4f20      	ldr	r7, [pc, #128]	; (8005d34 <_malloc_r+0xb0>)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	b923      	cbnz	r3, 8005cc2 <_malloc_r+0x3e>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f000 fc86 	bl	80065cc <_sbrk_r>
 8005cc0:	6038      	str	r0, [r7, #0]
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f000 fc81 	bl	80065cc <_sbrk_r>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	d123      	bne.n	8005d16 <_malloc_r+0x92>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	6033      	str	r3, [r6, #0]
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f000 fd44 	bl	8006760 <__malloc_unlock>
 8005cd8:	e7e3      	b.n	8005ca2 <_malloc_r+0x1e>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	1b5b      	subs	r3, r3, r5
 8005cde:	d417      	bmi.n	8005d10 <_malloc_r+0x8c>
 8005ce0:	2b0b      	cmp	r3, #11
 8005ce2:	d903      	bls.n	8005cec <_malloc_r+0x68>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	441c      	add	r4, r3
 8005ce8:	6025      	str	r5, [r4, #0]
 8005cea:	e004      	b.n	8005cf6 <_malloc_r+0x72>
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	42a2      	cmp	r2, r4
 8005cf0:	bf0c      	ite	eq
 8005cf2:	600b      	streq	r3, [r1, #0]
 8005cf4:	6053      	strne	r3, [r2, #4]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 fd32 	bl	8006760 <__malloc_unlock>
 8005cfc:	f104 000b 	add.w	r0, r4, #11
 8005d00:	1d23      	adds	r3, r4, #4
 8005d02:	f020 0007 	bic.w	r0, r0, #7
 8005d06:	1ac2      	subs	r2, r0, r3
 8005d08:	d0cc      	beq.n	8005ca4 <_malloc_r+0x20>
 8005d0a:	1a1b      	subs	r3, r3, r0
 8005d0c:	50a3      	str	r3, [r4, r2]
 8005d0e:	e7c9      	b.n	8005ca4 <_malloc_r+0x20>
 8005d10:	4622      	mov	r2, r4
 8005d12:	6864      	ldr	r4, [r4, #4]
 8005d14:	e7cc      	b.n	8005cb0 <_malloc_r+0x2c>
 8005d16:	1cc4      	adds	r4, r0, #3
 8005d18:	f024 0403 	bic.w	r4, r4, #3
 8005d1c:	42a0      	cmp	r0, r4
 8005d1e:	d0e3      	beq.n	8005ce8 <_malloc_r+0x64>
 8005d20:	1a21      	subs	r1, r4, r0
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 fc52 	bl	80065cc <_sbrk_r>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d1dd      	bne.n	8005ce8 <_malloc_r+0x64>
 8005d2c:	e7cf      	b.n	8005cce <_malloc_r+0x4a>
 8005d2e:	bf00      	nop
 8005d30:	200000a8 	.word	0x200000a8
 8005d34:	200000ac 	.word	0x200000ac

08005d38 <__ssputs_r>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	688e      	ldr	r6, [r1, #8]
 8005d3e:	429e      	cmp	r6, r3
 8005d40:	4682      	mov	sl, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	4690      	mov	r8, r2
 8005d46:	461f      	mov	r7, r3
 8005d48:	d838      	bhi.n	8005dbc <__ssputs_r+0x84>
 8005d4a:	898a      	ldrh	r2, [r1, #12]
 8005d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d50:	d032      	beq.n	8005db8 <__ssputs_r+0x80>
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	6909      	ldr	r1, [r1, #16]
 8005d56:	eba5 0901 	sub.w	r9, r5, r1
 8005d5a:	6965      	ldr	r5, [r4, #20]
 8005d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d64:	3301      	adds	r3, #1
 8005d66:	444b      	add	r3, r9
 8005d68:	106d      	asrs	r5, r5, #1
 8005d6a:	429d      	cmp	r5, r3
 8005d6c:	bf38      	it	cc
 8005d6e:	461d      	movcc	r5, r3
 8005d70:	0553      	lsls	r3, r2, #21
 8005d72:	d531      	bpl.n	8005dd8 <__ssputs_r+0xa0>
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7ff ff85 	bl	8005c84 <_malloc_r>
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	b950      	cbnz	r0, 8005d94 <__ssputs_r+0x5c>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	f8ca 3000 	str.w	r3, [sl]
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	6921      	ldr	r1, [r4, #16]
 8005d96:	464a      	mov	r2, r9
 8005d98:	f7ff fb6e 	bl	8005478 <memcpy>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	6126      	str	r6, [r4, #16]
 8005daa:	6165      	str	r5, [r4, #20]
 8005dac:	444e      	add	r6, r9
 8005dae:	eba5 0509 	sub.w	r5, r5, r9
 8005db2:	6026      	str	r6, [r4, #0]
 8005db4:	60a5      	str	r5, [r4, #8]
 8005db6:	463e      	mov	r6, r7
 8005db8:	42be      	cmp	r6, r7
 8005dba:	d900      	bls.n	8005dbe <__ssputs_r+0x86>
 8005dbc:	463e      	mov	r6, r7
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	f000 fcac 	bl	8006720 <memmove>
 8005dc8:	68a3      	ldr	r3, [r4, #8]
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	1b9b      	subs	r3, r3, r6
 8005dce:	4432      	add	r2, r6
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	6022      	str	r2, [r4, #0]
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e7db      	b.n	8005d90 <__ssputs_r+0x58>
 8005dd8:	462a      	mov	r2, r5
 8005dda:	f000 fcc7 	bl	800676c <_realloc_r>
 8005dde:	4606      	mov	r6, r0
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d1e1      	bne.n	8005da8 <__ssputs_r+0x70>
 8005de4:	6921      	ldr	r1, [r4, #16]
 8005de6:	4650      	mov	r0, sl
 8005de8:	f7ff fefc 	bl	8005be4 <_free_r>
 8005dec:	e7c7      	b.n	8005d7e <__ssputs_r+0x46>
	...

08005df0 <_svfiprintf_r>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	4698      	mov	r8, r3
 8005df6:	898b      	ldrh	r3, [r1, #12]
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	b09d      	sub	sp, #116	; 0x74
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	4614      	mov	r4, r2
 8005e02:	d50e      	bpl.n	8005e22 <_svfiprintf_r+0x32>
 8005e04:	690b      	ldr	r3, [r1, #16]
 8005e06:	b963      	cbnz	r3, 8005e22 <_svfiprintf_r+0x32>
 8005e08:	2140      	movs	r1, #64	; 0x40
 8005e0a:	f7ff ff3b 	bl	8005c84 <_malloc_r>
 8005e0e:	6028      	str	r0, [r5, #0]
 8005e10:	6128      	str	r0, [r5, #16]
 8005e12:	b920      	cbnz	r0, 8005e1e <_svfiprintf_r+0x2e>
 8005e14:	230c      	movs	r3, #12
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e1c:	e0d1      	b.n	8005fc2 <_svfiprintf_r+0x1d2>
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	616b      	str	r3, [r5, #20]
 8005e22:	2300      	movs	r3, #0
 8005e24:	9309      	str	r3, [sp, #36]	; 0x24
 8005e26:	2320      	movs	r3, #32
 8005e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e30:	2330      	movs	r3, #48	; 0x30
 8005e32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fdc <_svfiprintf_r+0x1ec>
 8005e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e3a:	f04f 0901 	mov.w	r9, #1
 8005e3e:	4623      	mov	r3, r4
 8005e40:	469a      	mov	sl, r3
 8005e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e46:	b10a      	cbz	r2, 8005e4c <_svfiprintf_r+0x5c>
 8005e48:	2a25      	cmp	r2, #37	; 0x25
 8005e4a:	d1f9      	bne.n	8005e40 <_svfiprintf_r+0x50>
 8005e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e50:	d00b      	beq.n	8005e6a <_svfiprintf_r+0x7a>
 8005e52:	465b      	mov	r3, fp
 8005e54:	4622      	mov	r2, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff ff6d 	bl	8005d38 <__ssputs_r>
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f000 80aa 	beq.w	8005fb8 <_svfiprintf_r+0x1c8>
 8005e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e66:	445a      	add	r2, fp
 8005e68:	9209      	str	r2, [sp, #36]	; 0x24
 8005e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80a2 	beq.w	8005fb8 <_svfiprintf_r+0x1c8>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e7e:	f10a 0a01 	add.w	sl, sl, #1
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	9307      	str	r3, [sp, #28]
 8005e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e8c:	4654      	mov	r4, sl
 8005e8e:	2205      	movs	r2, #5
 8005e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e94:	4851      	ldr	r0, [pc, #324]	; (8005fdc <_svfiprintf_r+0x1ec>)
 8005e96:	f7fa f99b 	bl	80001d0 <memchr>
 8005e9a:	9a04      	ldr	r2, [sp, #16]
 8005e9c:	b9d8      	cbnz	r0, 8005ed6 <_svfiprintf_r+0xe6>
 8005e9e:	06d0      	lsls	r0, r2, #27
 8005ea0:	bf44      	itt	mi
 8005ea2:	2320      	movmi	r3, #32
 8005ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea8:	0711      	lsls	r1, r2, #28
 8005eaa:	bf44      	itt	mi
 8005eac:	232b      	movmi	r3, #43	; 0x2b
 8005eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb8:	d015      	beq.n	8005ee6 <_svfiprintf_r+0xf6>
 8005eba:	9a07      	ldr	r2, [sp, #28]
 8005ebc:	4654      	mov	r4, sl
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f04f 0c0a 	mov.w	ip, #10
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eca:	3b30      	subs	r3, #48	; 0x30
 8005ecc:	2b09      	cmp	r3, #9
 8005ece:	d94e      	bls.n	8005f6e <_svfiprintf_r+0x17e>
 8005ed0:	b1b0      	cbz	r0, 8005f00 <_svfiprintf_r+0x110>
 8005ed2:	9207      	str	r2, [sp, #28]
 8005ed4:	e014      	b.n	8005f00 <_svfiprintf_r+0x110>
 8005ed6:	eba0 0308 	sub.w	r3, r0, r8
 8005eda:	fa09 f303 	lsl.w	r3, r9, r3
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	46a2      	mov	sl, r4
 8005ee4:	e7d2      	b.n	8005e8c <_svfiprintf_r+0x9c>
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	1d19      	adds	r1, r3, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	9103      	str	r1, [sp, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bfbb      	ittet	lt
 8005ef2:	425b      	neglt	r3, r3
 8005ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef8:	9307      	strge	r3, [sp, #28]
 8005efa:	9307      	strlt	r3, [sp, #28]
 8005efc:	bfb8      	it	lt
 8005efe:	9204      	strlt	r2, [sp, #16]
 8005f00:	7823      	ldrb	r3, [r4, #0]
 8005f02:	2b2e      	cmp	r3, #46	; 0x2e
 8005f04:	d10c      	bne.n	8005f20 <_svfiprintf_r+0x130>
 8005f06:	7863      	ldrb	r3, [r4, #1]
 8005f08:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0a:	d135      	bne.n	8005f78 <_svfiprintf_r+0x188>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	9203      	str	r2, [sp, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfb8      	it	lt
 8005f18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f1c:	3402      	adds	r4, #2
 8005f1e:	9305      	str	r3, [sp, #20]
 8005f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fec <_svfiprintf_r+0x1fc>
 8005f24:	7821      	ldrb	r1, [r4, #0]
 8005f26:	2203      	movs	r2, #3
 8005f28:	4650      	mov	r0, sl
 8005f2a:	f7fa f951 	bl	80001d0 <memchr>
 8005f2e:	b140      	cbz	r0, 8005f42 <_svfiprintf_r+0x152>
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	eba0 000a 	sub.w	r0, r0, sl
 8005f36:	fa03 f000 	lsl.w	r0, r3, r0
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	4303      	orrs	r3, r0
 8005f3e:	3401      	adds	r4, #1
 8005f40:	9304      	str	r3, [sp, #16]
 8005f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f46:	4826      	ldr	r0, [pc, #152]	; (8005fe0 <_svfiprintf_r+0x1f0>)
 8005f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f4c:	2206      	movs	r2, #6
 8005f4e:	f7fa f93f 	bl	80001d0 <memchr>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d038      	beq.n	8005fc8 <_svfiprintf_r+0x1d8>
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <_svfiprintf_r+0x1f4>)
 8005f58:	bb1b      	cbnz	r3, 8005fa2 <_svfiprintf_r+0x1b2>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	3307      	adds	r3, #7
 8005f5e:	f023 0307 	bic.w	r3, r3, #7
 8005f62:	3308      	adds	r3, #8
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f68:	4433      	add	r3, r6
 8005f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f6c:	e767      	b.n	8005e3e <_svfiprintf_r+0x4e>
 8005f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f72:	460c      	mov	r4, r1
 8005f74:	2001      	movs	r0, #1
 8005f76:	e7a5      	b.n	8005ec4 <_svfiprintf_r+0xd4>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	3401      	adds	r4, #1
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f04f 0c0a 	mov.w	ip, #10
 8005f84:	4620      	mov	r0, r4
 8005f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f8a:	3a30      	subs	r2, #48	; 0x30
 8005f8c:	2a09      	cmp	r2, #9
 8005f8e:	d903      	bls.n	8005f98 <_svfiprintf_r+0x1a8>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0c5      	beq.n	8005f20 <_svfiprintf_r+0x130>
 8005f94:	9105      	str	r1, [sp, #20]
 8005f96:	e7c3      	b.n	8005f20 <_svfiprintf_r+0x130>
 8005f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7f0      	b.n	8005f84 <_svfiprintf_r+0x194>
 8005fa2:	ab03      	add	r3, sp, #12
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	462a      	mov	r2, r5
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <_svfiprintf_r+0x1f8>)
 8005faa:	a904      	add	r1, sp, #16
 8005fac:	4638      	mov	r0, r7
 8005fae:	f3af 8000 	nop.w
 8005fb2:	1c42      	adds	r2, r0, #1
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	d1d6      	bne.n	8005f66 <_svfiprintf_r+0x176>
 8005fb8:	89ab      	ldrh	r3, [r5, #12]
 8005fba:	065b      	lsls	r3, r3, #25
 8005fbc:	f53f af2c 	bmi.w	8005e18 <_svfiprintf_r+0x28>
 8005fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc2:	b01d      	add	sp, #116	; 0x74
 8005fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc8:	ab03      	add	r3, sp, #12
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	462a      	mov	r2, r5
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <_svfiprintf_r+0x1f8>)
 8005fd0:	a904      	add	r1, sp, #16
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f000 f9d4 	bl	8006380 <_printf_i>
 8005fd8:	e7eb      	b.n	8005fb2 <_svfiprintf_r+0x1c2>
 8005fda:	bf00      	nop
 8005fdc:	08006a50 	.word	0x08006a50
 8005fe0:	08006a5a 	.word	0x08006a5a
 8005fe4:	00000000 	.word	0x00000000
 8005fe8:	08005d39 	.word	0x08005d39
 8005fec:	08006a56 	.word	0x08006a56

08005ff0 <__sfputc_r>:
 8005ff0:	6893      	ldr	r3, [r2, #8]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	b410      	push	{r4}
 8005ff8:	6093      	str	r3, [r2, #8]
 8005ffa:	da08      	bge.n	800600e <__sfputc_r+0x1e>
 8005ffc:	6994      	ldr	r4, [r2, #24]
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	db01      	blt.n	8006006 <__sfputc_r+0x16>
 8006002:	290a      	cmp	r1, #10
 8006004:	d103      	bne.n	800600e <__sfputc_r+0x1e>
 8006006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600a:	f7ff bb0d 	b.w	8005628 <__swbuf_r>
 800600e:	6813      	ldr	r3, [r2, #0]
 8006010:	1c58      	adds	r0, r3, #1
 8006012:	6010      	str	r0, [r2, #0]
 8006014:	7019      	strb	r1, [r3, #0]
 8006016:	4608      	mov	r0, r1
 8006018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800601c:	4770      	bx	lr

0800601e <__sfputs_r>:
 800601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4614      	mov	r4, r2
 8006026:	18d5      	adds	r5, r2, r3
 8006028:	42ac      	cmp	r4, r5
 800602a:	d101      	bne.n	8006030 <__sfputs_r+0x12>
 800602c:	2000      	movs	r0, #0
 800602e:	e007      	b.n	8006040 <__sfputs_r+0x22>
 8006030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006034:	463a      	mov	r2, r7
 8006036:	4630      	mov	r0, r6
 8006038:	f7ff ffda 	bl	8005ff0 <__sfputc_r>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d1f3      	bne.n	8006028 <__sfputs_r+0xa>
 8006040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006044 <_vfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	460d      	mov	r5, r1
 800604a:	b09d      	sub	sp, #116	; 0x74
 800604c:	4614      	mov	r4, r2
 800604e:	4698      	mov	r8, r3
 8006050:	4606      	mov	r6, r0
 8006052:	b118      	cbz	r0, 800605c <_vfiprintf_r+0x18>
 8006054:	6983      	ldr	r3, [r0, #24]
 8006056:	b90b      	cbnz	r3, 800605c <_vfiprintf_r+0x18>
 8006058:	f7ff fcc0 	bl	80059dc <__sinit>
 800605c:	4b89      	ldr	r3, [pc, #548]	; (8006284 <_vfiprintf_r+0x240>)
 800605e:	429d      	cmp	r5, r3
 8006060:	d11b      	bne.n	800609a <_vfiprintf_r+0x56>
 8006062:	6875      	ldr	r5, [r6, #4]
 8006064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006066:	07d9      	lsls	r1, r3, #31
 8006068:	d405      	bmi.n	8006076 <_vfiprintf_r+0x32>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	059a      	lsls	r2, r3, #22
 800606e:	d402      	bmi.n	8006076 <_vfiprintf_r+0x32>
 8006070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006072:	f7ff fd51 	bl	8005b18 <__retarget_lock_acquire_recursive>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	071b      	lsls	r3, r3, #28
 800607a:	d501      	bpl.n	8006080 <_vfiprintf_r+0x3c>
 800607c:	692b      	ldr	r3, [r5, #16]
 800607e:	b9eb      	cbnz	r3, 80060bc <_vfiprintf_r+0x78>
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff fb22 	bl	80056cc <__swsetup_r>
 8006088:	b1c0      	cbz	r0, 80060bc <_vfiprintf_r+0x78>
 800608a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608c:	07dc      	lsls	r4, r3, #31
 800608e:	d50e      	bpl.n	80060ae <_vfiprintf_r+0x6a>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006094:	b01d      	add	sp, #116	; 0x74
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	4b7b      	ldr	r3, [pc, #492]	; (8006288 <_vfiprintf_r+0x244>)
 800609c:	429d      	cmp	r5, r3
 800609e:	d101      	bne.n	80060a4 <_vfiprintf_r+0x60>
 80060a0:	68b5      	ldr	r5, [r6, #8]
 80060a2:	e7df      	b.n	8006064 <_vfiprintf_r+0x20>
 80060a4:	4b79      	ldr	r3, [pc, #484]	; (800628c <_vfiprintf_r+0x248>)
 80060a6:	429d      	cmp	r5, r3
 80060a8:	bf08      	it	eq
 80060aa:	68f5      	ldreq	r5, [r6, #12]
 80060ac:	e7da      	b.n	8006064 <_vfiprintf_r+0x20>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	0598      	lsls	r0, r3, #22
 80060b2:	d4ed      	bmi.n	8006090 <_vfiprintf_r+0x4c>
 80060b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b6:	f7ff fd30 	bl	8005b1a <__retarget_lock_release_recursive>
 80060ba:	e7e9      	b.n	8006090 <_vfiprintf_r+0x4c>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	2320      	movs	r3, #32
 80060c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ca:	2330      	movs	r3, #48	; 0x30
 80060cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006290 <_vfiprintf_r+0x24c>
 80060d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d4:	f04f 0901 	mov.w	r9, #1
 80060d8:	4623      	mov	r3, r4
 80060da:	469a      	mov	sl, r3
 80060dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e0:	b10a      	cbz	r2, 80060e6 <_vfiprintf_r+0xa2>
 80060e2:	2a25      	cmp	r2, #37	; 0x25
 80060e4:	d1f9      	bne.n	80060da <_vfiprintf_r+0x96>
 80060e6:	ebba 0b04 	subs.w	fp, sl, r4
 80060ea:	d00b      	beq.n	8006104 <_vfiprintf_r+0xc0>
 80060ec:	465b      	mov	r3, fp
 80060ee:	4622      	mov	r2, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff93 	bl	800601e <__sfputs_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	f000 80aa 	beq.w	8006252 <_vfiprintf_r+0x20e>
 80060fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006100:	445a      	add	r2, fp
 8006102:	9209      	str	r2, [sp, #36]	; 0x24
 8006104:	f89a 3000 	ldrb.w	r3, [sl]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a2 	beq.w	8006252 <_vfiprintf_r+0x20e>
 800610e:	2300      	movs	r3, #0
 8006110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006118:	f10a 0a01 	add.w	sl, sl, #1
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006124:	931a      	str	r3, [sp, #104]	; 0x68
 8006126:	4654      	mov	r4, sl
 8006128:	2205      	movs	r2, #5
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4858      	ldr	r0, [pc, #352]	; (8006290 <_vfiprintf_r+0x24c>)
 8006130:	f7fa f84e 	bl	80001d0 <memchr>
 8006134:	9a04      	ldr	r2, [sp, #16]
 8006136:	b9d8      	cbnz	r0, 8006170 <_vfiprintf_r+0x12c>
 8006138:	06d1      	lsls	r1, r2, #27
 800613a:	bf44      	itt	mi
 800613c:	2320      	movmi	r3, #32
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	0713      	lsls	r3, r2, #28
 8006144:	bf44      	itt	mi
 8006146:	232b      	movmi	r3, #43	; 0x2b
 8006148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b2a      	cmp	r3, #42	; 0x2a
 8006152:	d015      	beq.n	8006180 <_vfiprintf_r+0x13c>
 8006154:	9a07      	ldr	r2, [sp, #28]
 8006156:	4654      	mov	r4, sl
 8006158:	2000      	movs	r0, #0
 800615a:	f04f 0c0a 	mov.w	ip, #10
 800615e:	4621      	mov	r1, r4
 8006160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006164:	3b30      	subs	r3, #48	; 0x30
 8006166:	2b09      	cmp	r3, #9
 8006168:	d94e      	bls.n	8006208 <_vfiprintf_r+0x1c4>
 800616a:	b1b0      	cbz	r0, 800619a <_vfiprintf_r+0x156>
 800616c:	9207      	str	r2, [sp, #28]
 800616e:	e014      	b.n	800619a <_vfiprintf_r+0x156>
 8006170:	eba0 0308 	sub.w	r3, r0, r8
 8006174:	fa09 f303 	lsl.w	r3, r9, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	46a2      	mov	sl, r4
 800617e:	e7d2      	b.n	8006126 <_vfiprintf_r+0xe2>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	1d19      	adds	r1, r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	9103      	str	r1, [sp, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbb      	ittet	lt
 800618c:	425b      	neglt	r3, r3
 800618e:	f042 0202 	orrlt.w	r2, r2, #2
 8006192:	9307      	strge	r3, [sp, #28]
 8006194:	9307      	strlt	r3, [sp, #28]
 8006196:	bfb8      	it	lt
 8006198:	9204      	strlt	r2, [sp, #16]
 800619a:	7823      	ldrb	r3, [r4, #0]
 800619c:	2b2e      	cmp	r3, #46	; 0x2e
 800619e:	d10c      	bne.n	80061ba <_vfiprintf_r+0x176>
 80061a0:	7863      	ldrb	r3, [r4, #1]
 80061a2:	2b2a      	cmp	r3, #42	; 0x2a
 80061a4:	d135      	bne.n	8006212 <_vfiprintf_r+0x1ce>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	9203      	str	r2, [sp, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	bfb8      	it	lt
 80061b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061b6:	3402      	adds	r4, #2
 80061b8:	9305      	str	r3, [sp, #20]
 80061ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062a0 <_vfiprintf_r+0x25c>
 80061be:	7821      	ldrb	r1, [r4, #0]
 80061c0:	2203      	movs	r2, #3
 80061c2:	4650      	mov	r0, sl
 80061c4:	f7fa f804 	bl	80001d0 <memchr>
 80061c8:	b140      	cbz	r0, 80061dc <_vfiprintf_r+0x198>
 80061ca:	2340      	movs	r3, #64	; 0x40
 80061cc:	eba0 000a 	sub.w	r0, r0, sl
 80061d0:	fa03 f000 	lsl.w	r0, r3, r0
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	4303      	orrs	r3, r0
 80061d8:	3401      	adds	r4, #1
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e0:	482c      	ldr	r0, [pc, #176]	; (8006294 <_vfiprintf_r+0x250>)
 80061e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e6:	2206      	movs	r2, #6
 80061e8:	f7f9 fff2 	bl	80001d0 <memchr>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d03f      	beq.n	8006270 <_vfiprintf_r+0x22c>
 80061f0:	4b29      	ldr	r3, [pc, #164]	; (8006298 <_vfiprintf_r+0x254>)
 80061f2:	bb1b      	cbnz	r3, 800623c <_vfiprintf_r+0x1f8>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	3307      	adds	r3, #7
 80061f8:	f023 0307 	bic.w	r3, r3, #7
 80061fc:	3308      	adds	r3, #8
 80061fe:	9303      	str	r3, [sp, #12]
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	443b      	add	r3, r7
 8006204:	9309      	str	r3, [sp, #36]	; 0x24
 8006206:	e767      	b.n	80060d8 <_vfiprintf_r+0x94>
 8006208:	fb0c 3202 	mla	r2, ip, r2, r3
 800620c:	460c      	mov	r4, r1
 800620e:	2001      	movs	r0, #1
 8006210:	e7a5      	b.n	800615e <_vfiprintf_r+0x11a>
 8006212:	2300      	movs	r3, #0
 8006214:	3401      	adds	r4, #1
 8006216:	9305      	str	r3, [sp, #20]
 8006218:	4619      	mov	r1, r3
 800621a:	f04f 0c0a 	mov.w	ip, #10
 800621e:	4620      	mov	r0, r4
 8006220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006224:	3a30      	subs	r2, #48	; 0x30
 8006226:	2a09      	cmp	r2, #9
 8006228:	d903      	bls.n	8006232 <_vfiprintf_r+0x1ee>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0c5      	beq.n	80061ba <_vfiprintf_r+0x176>
 800622e:	9105      	str	r1, [sp, #20]
 8006230:	e7c3      	b.n	80061ba <_vfiprintf_r+0x176>
 8006232:	fb0c 2101 	mla	r1, ip, r1, r2
 8006236:	4604      	mov	r4, r0
 8006238:	2301      	movs	r3, #1
 800623a:	e7f0      	b.n	800621e <_vfiprintf_r+0x1da>
 800623c:	ab03      	add	r3, sp, #12
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	462a      	mov	r2, r5
 8006242:	4b16      	ldr	r3, [pc, #88]	; (800629c <_vfiprintf_r+0x258>)
 8006244:	a904      	add	r1, sp, #16
 8006246:	4630      	mov	r0, r6
 8006248:	f3af 8000 	nop.w
 800624c:	4607      	mov	r7, r0
 800624e:	1c78      	adds	r0, r7, #1
 8006250:	d1d6      	bne.n	8006200 <_vfiprintf_r+0x1bc>
 8006252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006254:	07d9      	lsls	r1, r3, #31
 8006256:	d405      	bmi.n	8006264 <_vfiprintf_r+0x220>
 8006258:	89ab      	ldrh	r3, [r5, #12]
 800625a:	059a      	lsls	r2, r3, #22
 800625c:	d402      	bmi.n	8006264 <_vfiprintf_r+0x220>
 800625e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006260:	f7ff fc5b 	bl	8005b1a <__retarget_lock_release_recursive>
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	065b      	lsls	r3, r3, #25
 8006268:	f53f af12 	bmi.w	8006090 <_vfiprintf_r+0x4c>
 800626c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626e:	e711      	b.n	8006094 <_vfiprintf_r+0x50>
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	462a      	mov	r2, r5
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <_vfiprintf_r+0x258>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	4630      	mov	r0, r6
 800627c:	f000 f880 	bl	8006380 <_printf_i>
 8006280:	e7e4      	b.n	800624c <_vfiprintf_r+0x208>
 8006282:	bf00      	nop
 8006284:	08006a10 	.word	0x08006a10
 8006288:	08006a30 	.word	0x08006a30
 800628c:	080069f0 	.word	0x080069f0
 8006290:	08006a50 	.word	0x08006a50
 8006294:	08006a5a 	.word	0x08006a5a
 8006298:	00000000 	.word	0x00000000
 800629c:	0800601f 	.word	0x0800601f
 80062a0:	08006a56 	.word	0x08006a56

080062a4 <_printf_common>:
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	4616      	mov	r6, r2
 80062aa:	4699      	mov	r9, r3
 80062ac:	688a      	ldr	r2, [r1, #8]
 80062ae:	690b      	ldr	r3, [r1, #16]
 80062b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bfb8      	it	lt
 80062b8:	4613      	movlt	r3, r2
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c0:	4607      	mov	r7, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b10a      	cbz	r2, 80062ca <_printf_common+0x26>
 80062c6:	3301      	adds	r3, #1
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	0699      	lsls	r1, r3, #26
 80062ce:	bf42      	ittt	mi
 80062d0:	6833      	ldrmi	r3, [r6, #0]
 80062d2:	3302      	addmi	r3, #2
 80062d4:	6033      	strmi	r3, [r6, #0]
 80062d6:	6825      	ldr	r5, [r4, #0]
 80062d8:	f015 0506 	ands.w	r5, r5, #6
 80062dc:	d106      	bne.n	80062ec <_printf_common+0x48>
 80062de:	f104 0a19 	add.w	sl, r4, #25
 80062e2:	68e3      	ldr	r3, [r4, #12]
 80062e4:	6832      	ldr	r2, [r6, #0]
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	dc26      	bgt.n	800633a <_printf_common+0x96>
 80062ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f0:	1e13      	subs	r3, r2, #0
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	0692      	lsls	r2, r2, #26
 80062fa:	d42b      	bmi.n	8006354 <_printf_common+0xb0>
 80062fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006300:	4649      	mov	r1, r9
 8006302:	4638      	mov	r0, r7
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d01e      	beq.n	8006348 <_printf_common+0xa4>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	68e5      	ldr	r5, [r4, #12]
 800630e:	6832      	ldr	r2, [r6, #0]
 8006310:	f003 0306 	and.w	r3, r3, #6
 8006314:	2b04      	cmp	r3, #4
 8006316:	bf08      	it	eq
 8006318:	1aad      	subeq	r5, r5, r2
 800631a:	68a3      	ldr	r3, [r4, #8]
 800631c:	6922      	ldr	r2, [r4, #16]
 800631e:	bf0c      	ite	eq
 8006320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006324:	2500      	movne	r5, #0
 8006326:	4293      	cmp	r3, r2
 8006328:	bfc4      	itt	gt
 800632a:	1a9b      	subgt	r3, r3, r2
 800632c:	18ed      	addgt	r5, r5, r3
 800632e:	2600      	movs	r6, #0
 8006330:	341a      	adds	r4, #26
 8006332:	42b5      	cmp	r5, r6
 8006334:	d11a      	bne.n	800636c <_printf_common+0xc8>
 8006336:	2000      	movs	r0, #0
 8006338:	e008      	b.n	800634c <_printf_common+0xa8>
 800633a:	2301      	movs	r3, #1
 800633c:	4652      	mov	r2, sl
 800633e:	4649      	mov	r1, r9
 8006340:	4638      	mov	r0, r7
 8006342:	47c0      	blx	r8
 8006344:	3001      	adds	r0, #1
 8006346:	d103      	bne.n	8006350 <_printf_common+0xac>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006350:	3501      	adds	r5, #1
 8006352:	e7c6      	b.n	80062e2 <_printf_common+0x3e>
 8006354:	18e1      	adds	r1, r4, r3
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	2030      	movs	r0, #48	; 0x30
 800635a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800635e:	4422      	add	r2, r4
 8006360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006368:	3302      	adds	r3, #2
 800636a:	e7c7      	b.n	80062fc <_printf_common+0x58>
 800636c:	2301      	movs	r3, #1
 800636e:	4622      	mov	r2, r4
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d0e6      	beq.n	8006348 <_printf_common+0xa4>
 800637a:	3601      	adds	r6, #1
 800637c:	e7d9      	b.n	8006332 <_printf_common+0x8e>
	...

08006380 <_printf_i>:
 8006380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	460c      	mov	r4, r1
 8006386:	4691      	mov	r9, r2
 8006388:	7e27      	ldrb	r7, [r4, #24]
 800638a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800638c:	2f78      	cmp	r7, #120	; 0x78
 800638e:	4680      	mov	r8, r0
 8006390:	469a      	mov	sl, r3
 8006392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006396:	d807      	bhi.n	80063a8 <_printf_i+0x28>
 8006398:	2f62      	cmp	r7, #98	; 0x62
 800639a:	d80a      	bhi.n	80063b2 <_printf_i+0x32>
 800639c:	2f00      	cmp	r7, #0
 800639e:	f000 80d8 	beq.w	8006552 <_printf_i+0x1d2>
 80063a2:	2f58      	cmp	r7, #88	; 0x58
 80063a4:	f000 80a3 	beq.w	80064ee <_printf_i+0x16e>
 80063a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b0:	e03a      	b.n	8006428 <_printf_i+0xa8>
 80063b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063b6:	2b15      	cmp	r3, #21
 80063b8:	d8f6      	bhi.n	80063a8 <_printf_i+0x28>
 80063ba:	a001      	add	r0, pc, #4	; (adr r0, 80063c0 <_printf_i+0x40>)
 80063bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063c0:	08006419 	.word	0x08006419
 80063c4:	0800642d 	.word	0x0800642d
 80063c8:	080063a9 	.word	0x080063a9
 80063cc:	080063a9 	.word	0x080063a9
 80063d0:	080063a9 	.word	0x080063a9
 80063d4:	080063a9 	.word	0x080063a9
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	080063a9 	.word	0x080063a9
 80063e0:	080063a9 	.word	0x080063a9
 80063e4:	080063a9 	.word	0x080063a9
 80063e8:	080063a9 	.word	0x080063a9
 80063ec:	08006539 	.word	0x08006539
 80063f0:	0800645d 	.word	0x0800645d
 80063f4:	0800651b 	.word	0x0800651b
 80063f8:	080063a9 	.word	0x080063a9
 80063fc:	080063a9 	.word	0x080063a9
 8006400:	0800655b 	.word	0x0800655b
 8006404:	080063a9 	.word	0x080063a9
 8006408:	0800645d 	.word	0x0800645d
 800640c:	080063a9 	.word	0x080063a9
 8006410:	080063a9 	.word	0x080063a9
 8006414:	08006523 	.word	0x08006523
 8006418:	680b      	ldr	r3, [r1, #0]
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	600a      	str	r2, [r1, #0]
 8006420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006428:	2301      	movs	r3, #1
 800642a:	e0a3      	b.n	8006574 <_printf_i+0x1f4>
 800642c:	6825      	ldr	r5, [r4, #0]
 800642e:	6808      	ldr	r0, [r1, #0]
 8006430:	062e      	lsls	r6, r5, #24
 8006432:	f100 0304 	add.w	r3, r0, #4
 8006436:	d50a      	bpl.n	800644e <_printf_i+0xce>
 8006438:	6805      	ldr	r5, [r0, #0]
 800643a:	600b      	str	r3, [r1, #0]
 800643c:	2d00      	cmp	r5, #0
 800643e:	da03      	bge.n	8006448 <_printf_i+0xc8>
 8006440:	232d      	movs	r3, #45	; 0x2d
 8006442:	426d      	negs	r5, r5
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006448:	485e      	ldr	r0, [pc, #376]	; (80065c4 <_printf_i+0x244>)
 800644a:	230a      	movs	r3, #10
 800644c:	e019      	b.n	8006482 <_printf_i+0x102>
 800644e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006452:	6805      	ldr	r5, [r0, #0]
 8006454:	600b      	str	r3, [r1, #0]
 8006456:	bf18      	it	ne
 8006458:	b22d      	sxthne	r5, r5
 800645a:	e7ef      	b.n	800643c <_printf_i+0xbc>
 800645c:	680b      	ldr	r3, [r1, #0]
 800645e:	6825      	ldr	r5, [r4, #0]
 8006460:	1d18      	adds	r0, r3, #4
 8006462:	6008      	str	r0, [r1, #0]
 8006464:	0628      	lsls	r0, r5, #24
 8006466:	d501      	bpl.n	800646c <_printf_i+0xec>
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	e002      	b.n	8006472 <_printf_i+0xf2>
 800646c:	0669      	lsls	r1, r5, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0xe8>
 8006470:	881d      	ldrh	r5, [r3, #0]
 8006472:	4854      	ldr	r0, [pc, #336]	; (80065c4 <_printf_i+0x244>)
 8006474:	2f6f      	cmp	r7, #111	; 0x6f
 8006476:	bf0c      	ite	eq
 8006478:	2308      	moveq	r3, #8
 800647a:	230a      	movne	r3, #10
 800647c:	2100      	movs	r1, #0
 800647e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006482:	6866      	ldr	r6, [r4, #4]
 8006484:	60a6      	str	r6, [r4, #8]
 8006486:	2e00      	cmp	r6, #0
 8006488:	bfa2      	ittt	ge
 800648a:	6821      	ldrge	r1, [r4, #0]
 800648c:	f021 0104 	bicge.w	r1, r1, #4
 8006490:	6021      	strge	r1, [r4, #0]
 8006492:	b90d      	cbnz	r5, 8006498 <_printf_i+0x118>
 8006494:	2e00      	cmp	r6, #0
 8006496:	d04d      	beq.n	8006534 <_printf_i+0x1b4>
 8006498:	4616      	mov	r6, r2
 800649a:	fbb5 f1f3 	udiv	r1, r5, r3
 800649e:	fb03 5711 	mls	r7, r3, r1, r5
 80064a2:	5dc7      	ldrb	r7, [r0, r7]
 80064a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064a8:	462f      	mov	r7, r5
 80064aa:	42bb      	cmp	r3, r7
 80064ac:	460d      	mov	r5, r1
 80064ae:	d9f4      	bls.n	800649a <_printf_i+0x11a>
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d10b      	bne.n	80064cc <_printf_i+0x14c>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	07df      	lsls	r7, r3, #31
 80064b8:	d508      	bpl.n	80064cc <_printf_i+0x14c>
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6861      	ldr	r1, [r4, #4]
 80064be:	4299      	cmp	r1, r3
 80064c0:	bfde      	ittt	le
 80064c2:	2330      	movle	r3, #48	; 0x30
 80064c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064c8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80064cc:	1b92      	subs	r2, r2, r6
 80064ce:	6122      	str	r2, [r4, #16]
 80064d0:	f8cd a000 	str.w	sl, [sp]
 80064d4:	464b      	mov	r3, r9
 80064d6:	aa03      	add	r2, sp, #12
 80064d8:	4621      	mov	r1, r4
 80064da:	4640      	mov	r0, r8
 80064dc:	f7ff fee2 	bl	80062a4 <_printf_common>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d14c      	bne.n	800657e <_printf_i+0x1fe>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	b004      	add	sp, #16
 80064ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ee:	4835      	ldr	r0, [pc, #212]	; (80065c4 <_printf_i+0x244>)
 80064f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	680e      	ldr	r6, [r1, #0]
 80064f8:	061f      	lsls	r7, r3, #24
 80064fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80064fe:	600e      	str	r6, [r1, #0]
 8006500:	d514      	bpl.n	800652c <_printf_i+0x1ac>
 8006502:	07d9      	lsls	r1, r3, #31
 8006504:	bf44      	itt	mi
 8006506:	f043 0320 	orrmi.w	r3, r3, #32
 800650a:	6023      	strmi	r3, [r4, #0]
 800650c:	b91d      	cbnz	r5, 8006516 <_printf_i+0x196>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	f023 0320 	bic.w	r3, r3, #32
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	2310      	movs	r3, #16
 8006518:	e7b0      	b.n	800647c <_printf_i+0xfc>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	f043 0320 	orr.w	r3, r3, #32
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	2378      	movs	r3, #120	; 0x78
 8006524:	4828      	ldr	r0, [pc, #160]	; (80065c8 <_printf_i+0x248>)
 8006526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800652a:	e7e3      	b.n	80064f4 <_printf_i+0x174>
 800652c:	065e      	lsls	r6, r3, #25
 800652e:	bf48      	it	mi
 8006530:	b2ad      	uxthmi	r5, r5
 8006532:	e7e6      	b.n	8006502 <_printf_i+0x182>
 8006534:	4616      	mov	r6, r2
 8006536:	e7bb      	b.n	80064b0 <_printf_i+0x130>
 8006538:	680b      	ldr	r3, [r1, #0]
 800653a:	6826      	ldr	r6, [r4, #0]
 800653c:	6960      	ldr	r0, [r4, #20]
 800653e:	1d1d      	adds	r5, r3, #4
 8006540:	600d      	str	r5, [r1, #0]
 8006542:	0635      	lsls	r5, r6, #24
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	d501      	bpl.n	800654c <_printf_i+0x1cc>
 8006548:	6018      	str	r0, [r3, #0]
 800654a:	e002      	b.n	8006552 <_printf_i+0x1d2>
 800654c:	0671      	lsls	r1, r6, #25
 800654e:	d5fb      	bpl.n	8006548 <_printf_i+0x1c8>
 8006550:	8018      	strh	r0, [r3, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	4616      	mov	r6, r2
 8006558:	e7ba      	b.n	80064d0 <_printf_i+0x150>
 800655a:	680b      	ldr	r3, [r1, #0]
 800655c:	1d1a      	adds	r2, r3, #4
 800655e:	600a      	str	r2, [r1, #0]
 8006560:	681e      	ldr	r6, [r3, #0]
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	2100      	movs	r1, #0
 8006566:	4630      	mov	r0, r6
 8006568:	f7f9 fe32 	bl	80001d0 <memchr>
 800656c:	b108      	cbz	r0, 8006572 <_printf_i+0x1f2>
 800656e:	1b80      	subs	r0, r0, r6
 8006570:	6060      	str	r0, [r4, #4]
 8006572:	6863      	ldr	r3, [r4, #4]
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	2300      	movs	r3, #0
 8006578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657c:	e7a8      	b.n	80064d0 <_printf_i+0x150>
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d0ab      	beq.n	80064e4 <_printf_i+0x164>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	079b      	lsls	r3, r3, #30
 8006590:	d413      	bmi.n	80065ba <_printf_i+0x23a>
 8006592:	68e0      	ldr	r0, [r4, #12]
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	4298      	cmp	r0, r3
 8006598:	bfb8      	it	lt
 800659a:	4618      	movlt	r0, r3
 800659c:	e7a4      	b.n	80064e8 <_printf_i+0x168>
 800659e:	2301      	movs	r3, #1
 80065a0:	4632      	mov	r2, r6
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d09b      	beq.n	80064e4 <_printf_i+0x164>
 80065ac:	3501      	adds	r5, #1
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	9903      	ldr	r1, [sp, #12]
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dcf2      	bgt.n	800659e <_printf_i+0x21e>
 80065b8:	e7eb      	b.n	8006592 <_printf_i+0x212>
 80065ba:	2500      	movs	r5, #0
 80065bc:	f104 0619 	add.w	r6, r4, #25
 80065c0:	e7f5      	b.n	80065ae <_printf_i+0x22e>
 80065c2:	bf00      	nop
 80065c4:	08006a61 	.word	0x08006a61
 80065c8:	08006a72 	.word	0x08006a72

080065cc <_sbrk_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_sbrk_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fb f9b0 	bl	800193c <_sbrk>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_sbrk_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_sbrk_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20000808 	.word	0x20000808

080065ec <__sread>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f4:	f000 f8e0 	bl	80067b8 <_read_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	bfab      	itete	ge
 80065fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006600:	181b      	addge	r3, r3, r0
 8006602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006606:	bfac      	ite	ge
 8006608:	6563      	strge	r3, [r4, #84]	; 0x54
 800660a:	81a3      	strhlt	r3, [r4, #12]
 800660c:	bd10      	pop	{r4, pc}

0800660e <__swrite>:
 800660e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006612:	461f      	mov	r7, r3
 8006614:	898b      	ldrh	r3, [r1, #12]
 8006616:	05db      	lsls	r3, r3, #23
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	4616      	mov	r6, r2
 800661e:	d505      	bpl.n	800662c <__swrite+0x1e>
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	2302      	movs	r3, #2
 8006626:	2200      	movs	r2, #0
 8006628:	f000 f868 	bl	80066fc <_lseek_r>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006642:	f000 b817 	b.w	8006674 <_write_r>

08006646 <__sseek>:
 8006646:	b510      	push	{r4, lr}
 8006648:	460c      	mov	r4, r1
 800664a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664e:	f000 f855 	bl	80066fc <_lseek_r>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	bf15      	itete	ne
 8006658:	6560      	strne	r0, [r4, #84]	; 0x54
 800665a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800665e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006662:	81a3      	strheq	r3, [r4, #12]
 8006664:	bf18      	it	ne
 8006666:	81a3      	strhne	r3, [r4, #12]
 8006668:	bd10      	pop	{r4, pc}

0800666a <__sclose>:
 800666a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666e:	f000 b813 	b.w	8006698 <_close_r>
	...

08006674 <_write_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_write_r+0x20>)
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f7fa f88c 	bl	80007a0 <_write>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_write_r+0x1e>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_write_r+0x1e>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	20000808 	.word	0x20000808

08006698 <_close_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	; (80066b4 <_close_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f7fb f915 	bl	80018d2 <_close>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_close_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_close_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	20000808 	.word	0x20000808

080066b8 <_fstat_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	; (80066d8 <_fstat_r+0x20>)
 80066bc:	2300      	movs	r3, #0
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	f7fb f910 	bl	80018ea <_fstat>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d102      	bne.n	80066d4 <_fstat_r+0x1c>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b103      	cbz	r3, 80066d4 <_fstat_r+0x1c>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
 80066d6:	bf00      	nop
 80066d8:	20000808 	.word	0x20000808

080066dc <_isatty_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_isatty_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fb f90f 	bl	800190a <_isatty>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_isatty_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_isatty_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20000808 	.word	0x20000808

080066fc <_lseek_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_lseek_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fb f908 	bl	8001920 <_lseek>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_lseek_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_lseek_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000808 	.word	0x20000808

08006720 <memmove>:
 8006720:	4288      	cmp	r0, r1
 8006722:	b510      	push	{r4, lr}
 8006724:	eb01 0402 	add.w	r4, r1, r2
 8006728:	d902      	bls.n	8006730 <memmove+0x10>
 800672a:	4284      	cmp	r4, r0
 800672c:	4623      	mov	r3, r4
 800672e:	d807      	bhi.n	8006740 <memmove+0x20>
 8006730:	1e43      	subs	r3, r0, #1
 8006732:	42a1      	cmp	r1, r4
 8006734:	d008      	beq.n	8006748 <memmove+0x28>
 8006736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800673a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800673e:	e7f8      	b.n	8006732 <memmove+0x12>
 8006740:	4402      	add	r2, r0
 8006742:	4601      	mov	r1, r0
 8006744:	428a      	cmp	r2, r1
 8006746:	d100      	bne.n	800674a <memmove+0x2a>
 8006748:	bd10      	pop	{r4, pc}
 800674a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800674e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006752:	e7f7      	b.n	8006744 <memmove+0x24>

08006754 <__malloc_lock>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__malloc_lock+0x8>)
 8006756:	f7ff b9df 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	20000800 	.word	0x20000800

08006760 <__malloc_unlock>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__malloc_unlock+0x8>)
 8006762:	f7ff b9da 	b.w	8005b1a <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	20000800 	.word	0x20000800

0800676c <_realloc_r>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	4607      	mov	r7, r0
 8006770:	4614      	mov	r4, r2
 8006772:	460e      	mov	r6, r1
 8006774:	b921      	cbnz	r1, 8006780 <_realloc_r+0x14>
 8006776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800677a:	4611      	mov	r1, r2
 800677c:	f7ff ba82 	b.w	8005c84 <_malloc_r>
 8006780:	b922      	cbnz	r2, 800678c <_realloc_r+0x20>
 8006782:	f7ff fa2f 	bl	8005be4 <_free_r>
 8006786:	4625      	mov	r5, r4
 8006788:	4628      	mov	r0, r5
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678c:	f000 f826 	bl	80067dc <_malloc_usable_size_r>
 8006790:	42a0      	cmp	r0, r4
 8006792:	d20f      	bcs.n	80067b4 <_realloc_r+0x48>
 8006794:	4621      	mov	r1, r4
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff fa74 	bl	8005c84 <_malloc_r>
 800679c:	4605      	mov	r5, r0
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0f2      	beq.n	8006788 <_realloc_r+0x1c>
 80067a2:	4631      	mov	r1, r6
 80067a4:	4622      	mov	r2, r4
 80067a6:	f7fe fe67 	bl	8005478 <memcpy>
 80067aa:	4631      	mov	r1, r6
 80067ac:	4638      	mov	r0, r7
 80067ae:	f7ff fa19 	bl	8005be4 <_free_r>
 80067b2:	e7e9      	b.n	8006788 <_realloc_r+0x1c>
 80067b4:	4635      	mov	r5, r6
 80067b6:	e7e7      	b.n	8006788 <_realloc_r+0x1c>

080067b8 <_read_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	; (80067d8 <_read_r+0x20>)
 80067bc:	4604      	mov	r4, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fb f866 	bl	8001898 <_read>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_read_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_read_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000808 	.word	0x20000808

080067dc <_malloc_usable_size_r>:
 80067dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e0:	1f18      	subs	r0, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bfbc      	itt	lt
 80067e6:	580b      	ldrlt	r3, [r1, r0]
 80067e8:	18c0      	addlt	r0, r0, r3
 80067ea:	4770      	bx	lr

080067ec <_init>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr

080067f8 <_fini>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr
